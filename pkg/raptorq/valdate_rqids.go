package raptorq

import (
	"context"
	"strings"

	"github.com/LumeraProtocol/supernode/pkg/errors"
	"github.com/LumeraProtocol/supernode/pkg/lumera"
	"github.com/LumeraProtocol/supernode/pkg/utils"
	json "github.com/json-iterator/go"
)

// ValidateRQIDs validates the RaptorQ IDs by:
// 1. Parsing the signedData into encoded data and signature
// 2. Verifying the creator's signature against the encoded file
// 3. Confirming that symbol identifiers match between creator and SN versions
func ValidateRQIDs(ctx context.Context, lc lumera.Client, signedData string,
	encRQIDsFileBySN []byte, symbolIdentifiers []string,
	creatorAddress string) (err error) {

	// Split the signedData into encoded part and signature part
	parts := strings.SplitN(signedData, ".", 2) // b64Encode(encodedData).Signature
	if len(parts) != 2 {
		return errors.New("invalid signed data format: missing signature")
	}

	// Extract the parts
	encodedRqids := parts[0]
	creatorSignature := []byte(parts[1])

	// Decode the base64 encoded rqids file received in the action request
	rqidsFileBytesByCreator, err := utils.B64Decode([]byte(encodedRqids))
	if err != nil {
		return errors.Errorf("failed to decode creator's RQID file: %w", err)
	}

	// Verify signature against the encodedRQIDFile generated by the supernode
	err = lc.Auth().Verify(ctx, creatorAddress, encRQIDsFileBySN, creatorSignature)
	if err != nil {
		return errors.Errorf("signature verification failed: %w", err)
	}

	// Parse the creator's RQID file
	var actionInputRqIDsRawFile RawSymbolIDFile
	err = json.Unmarshal(rqidsFileBytesByCreator, &actionInputRqIDsRawFile)
	if err != nil {
		return errors.Errorf("failed to parse creator's RQID file: %w", err)
	}

	// Verify that the symbol identifiers match between versions
	if err := utils.EqualStrList(symbolIdentifiers, actionInputRqIDsRawFile.SymbolIdentifiers); err != nil {
		return errors.Errorf("symbol identifiers don't match: %w", err)
	}

	return nil

}
