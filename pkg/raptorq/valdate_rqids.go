package raptorq

import (
	"context"
	"strings"

	"github.com/LumeraProtocol/supernode/pkg/errors"
	"github.com/LumeraProtocol/supernode/pkg/lumera"
	"github.com/LumeraProtocol/supernode/pkg/utils"
	json "github.com/json-iterator/go"
)

func ValidateRQIDs(ctx context.Context, lc lumera.Client, signedData string, encRQIDsFileBySN []byte, symbolIdentifiers []string, creatorAddress string) (creatorSignature []byte, err error) {
	parts := strings.SplitN(signedData, ".", 2) // b64Encode(encodedData).Signature
	if len(parts) != 2 {
		return nil, errors.Errorf("sign identifiers file: %w", err)
	}

	// received from the action details
	encodedRqids := parts[0]
	creatorSignature = []byte(parts[1])

	// Decode the base64 encoded rqids file received in the action request
	rqidsFileBytesByCreator, err := utils.B64Decode([]byte(encodedRqids))
	if err != nil {
		return nil, errors.Errorf("sign identifiers file: %w", err)
	}

	// Verify signature against the encodedRQIDFile generated by the supernode
	err = lc.Auth().Verify(ctx, creatorAddress, encRQIDsFileBySN, creatorSignature)
	if err != nil {
		return nil, errors.Errorf("sign identifiers file: %w", err)
	}

	var actionInputRqIDsRawFile RawSymbolIDFile
	err = json.Unmarshal(rqidsFileBytesByCreator, &actionInputRqIDsRawFile)
	if err != nil {
		return nil, errors.Errorf("sign identifiers file: %w", err)
	}

	if err := utils.EqualStrList(symbolIdentifiers, actionInputRqIDsRawFile.SymbolIdentifiers); err != nil {
		return nil, errors.Errorf("error matching rq-ids")
	}

	return creatorSignature, nil
}
