// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package raptorq is a generated GoMock package.
package raptorq

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockService) Decode(ctx context.Context, req DecodeRequest) (DecodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", ctx, req)
	ret0, _ := ret[0].(DecodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode.
func (mr *MockServiceMockRecorder) Decode(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockService)(nil).Decode), ctx, req)
}

// Encode mocks base method.
func (m *MockService) Encode(ctx context.Context, req EncodeRequest) (EncodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", ctx, req)
	ret0, _ := ret[0].(EncodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockServiceMockRecorder) Encode(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockService)(nil).Encode), ctx, req)
}

// EncodeMetaData mocks base method.
func (m *MockService) EncodeMetaData(ctx context.Context, req EncodeMetadataRequest) (EncodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeMetaData", ctx, req)
	ret0, _ := ret[0].(EncodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncodeMetaData indicates an expected call of EncodeMetaData.
func (mr *MockServiceMockRecorder) EncodeMetaData(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeMetaData", reflect.TypeOf((*MockService)(nil).EncodeMetaData), ctx, req)
}
