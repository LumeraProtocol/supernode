// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package raptorq is a generated GoMock package.
package raptorq

import (
	context "context"
	reflect "reflect"

	lumera "github.com/LumeraProtocol/supernode/pkg/lumera"
	rqstore "github.com/LumeraProtocol/supernode/pkg/storage/rqstore"
	gomock "github.com/golang/mock/gomock"
)

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockClientInterface) Connect(ctx context.Context, address string) (Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", ctx, address)
	ret0, _ := ret[0].(Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockClientInterfaceMockRecorder) Connect(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockClientInterface)(nil).Connect), ctx, address)
}

// MockConnection is a mock of Connection interface.
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
}

// MockConnectionMockRecorder is the mock recorder for MockConnection.
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance.
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConnection) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConnectionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConnection)(nil).Close))
}

// RaptorQ mocks base method.
func (m *MockConnection) RaptorQ(config *Config, lc lumera.Client, store rqstore.Store) RaptorQ {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RaptorQ", config, lc, store)
	ret0, _ := ret[0].(RaptorQ)
	return ret0
}

// RaptorQ indicates an expected call of RaptorQ.
func (mr *MockConnectionMockRecorder) RaptorQ(config, lc, store interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RaptorQ", reflect.TypeOf((*MockConnection)(nil).RaptorQ), config, lc, store)
}

// MockRaptorQ is a mock of RaptorQ interface.
type MockRaptorQ struct {
	ctrl     *gomock.Controller
	recorder *MockRaptorQMockRecorder
}

// MockRaptorQMockRecorder is the mock recorder for MockRaptorQ.
type MockRaptorQMockRecorder struct {
	mock *MockRaptorQ
}

// NewMockRaptorQ creates a new mock instance.
func NewMockRaptorQ(ctrl *gomock.Controller) *MockRaptorQ {
	mock := &MockRaptorQ{ctrl: ctrl}
	mock.recorder = &MockRaptorQMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRaptorQ) EXPECT() *MockRaptorQMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockRaptorQ) Decode(ctx context.Context, req DecodeRequest) (DecodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", ctx, req)
	ret0, _ := ret[0].(DecodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode.
func (mr *MockRaptorQMockRecorder) Decode(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockRaptorQ)(nil).Decode), ctx, req)
}

// Encode mocks base method.
func (m *MockRaptorQ) Encode(ctx context.Context, req EncodeRequest) (EncodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", ctx, req)
	ret0, _ := ret[0].(EncodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockRaptorQMockRecorder) Encode(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockRaptorQ)(nil).Encode), ctx, req)
}

// EncodeMetaData mocks base method.
func (m *MockRaptorQ) EncodeMetaData(ctx context.Context, req EncodeMetadataRequest) (EncodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeMetaData", ctx, req)
	ret0, _ := ret[0].(EncodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncodeMetaData indicates an expected call of EncodeMetaData.
func (mr *MockRaptorQMockRecorder) EncodeMetaData(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeMetaData", reflect.TypeOf((*MockRaptorQ)(nil).EncodeMetaData), ctx, req)
}

// GenRQIdentifiersFiles mocks base method.
func (m *MockRaptorQ) GenRQIdentifiersFiles(ctx context.Context, req GenRQIdentifiersFilesRequest) (GenRQIdentifiersFilesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenRQIdentifiersFiles", ctx, req)
	ret0, _ := ret[0].(GenRQIdentifiersFilesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenRQIdentifiersFiles indicates an expected call of GenRQIdentifiersFiles.
func (mr *MockRaptorQMockRecorder) GenRQIdentifiersFiles(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenRQIdentifiersFiles", reflect.TypeOf((*MockRaptorQ)(nil).GenRQIdentifiersFiles), ctx, req)
}
