// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package tx is a generated GoMock package.
package tx

import (
	context "context"
	reflect "reflect"

	tx "github.com/cosmos/cosmos-sdk/types/tx"
	gomock "github.com/golang/mock/gomock"
)

// MockModule is a mock of Module interface.
type MockModule struct {
	ctrl     *gomock.Controller
	recorder *MockModuleMockRecorder
}

// MockModuleMockRecorder is the mock recorder for MockModule.
type MockModuleMockRecorder struct {
	mock *MockModule
}

// NewMockModule creates a new mock instance.
func NewMockModule(ctrl *gomock.Controller) *MockModule {
	mock := &MockModule{ctrl: ctrl}
	mock.recorder = &MockModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModule) EXPECT() *MockModuleMockRecorder {
	return m.recorder
}

// BroadcastTx mocks base method.
func (m *MockModule) BroadcastTx(ctx context.Context, txBytes []byte, mode tx.BroadcastMode) (*tx.BroadcastTxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastTx", ctx, txBytes, mode)
	ret0, _ := ret[0].(*tx.BroadcastTxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BroadcastTx indicates an expected call of BroadcastTx.
func (mr *MockModuleMockRecorder) BroadcastTx(ctx, txBytes, mode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastTx", reflect.TypeOf((*MockModule)(nil).BroadcastTx), ctx, txBytes, mode)
}

// GetTx mocks base method.
func (m *MockModule) GetTx(ctx context.Context, hash string) (*tx.GetTxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTx", ctx, hash)
	ret0, _ := ret[0].(*tx.GetTxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTx indicates an expected call of GetTx.
func (mr *MockModuleMockRecorder) GetTx(ctx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTx", reflect.TypeOf((*MockModule)(nil).GetTx), ctx, hash)
}

// SimulateTx mocks base method.
func (m *MockModule) SimulateTx(ctx context.Context, txBytes []byte) (*tx.SimulateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SimulateTx", ctx, txBytes)
	ret0, _ := ret[0].(*tx.SimulateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SimulateTx indicates an expected call of SimulateTx.
func (mr *MockModuleMockRecorder) SimulateTx(ctx, txBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SimulateTx", reflect.TypeOf((*MockModule)(nil).SimulateTx), ctx, txBytes)
}
