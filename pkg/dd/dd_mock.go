// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package dd is a generated GoMock package.
package dd

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetStatus mocks base method.
func (m *MockService) GetStatus(ctx context.Context, req GetStatusRequest) (GetStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", ctx, req)
	ret0, _ := ret[0].(GetStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockServiceMockRecorder) GetStatus(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockService)(nil).GetStatus), ctx, req)
}

// ImageRarenessScore mocks base method.
func (m *MockService) ImageRarenessScore(ctx context.Context, req RarenessScoreRequest) (ImageRarenessScoreResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageRarenessScore", ctx, req)
	ret0, _ := ret[0].(ImageRarenessScoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageRarenessScore indicates an expected call of ImageRarenessScore.
func (mr *MockServiceMockRecorder) ImageRarenessScore(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageRarenessScore", reflect.TypeOf((*MockService)(nil).ImageRarenessScore), ctx, req)
}
