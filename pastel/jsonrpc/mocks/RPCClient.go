// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	jsonrpc "github.com/LumeraProtocol/supernode/pastel/jsonrpc"
	mock "github.com/stretchr/testify/mock"
)

// RPCClient is an autogenerated mock type for the RPCClient type
type RPCClient struct {
	mock.Mock
}

// Call provides a mock function with given fields: method, params
func (_m *RPCClient) Call(method string, params ...interface{}) (*jsonrpc.RPCResponse, error) {
	var _ca []interface{}
	_ca = append(_ca, method)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 *jsonrpc.RPCResponse
	if rf, ok := ret.Get(0).(func(string, ...interface{}) *jsonrpc.RPCResponse); ok {
		r0 = rf(method, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jsonrpc.RPCResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(method, params...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CallBatch provides a mock function with given fields: requests
func (_m *RPCClient) CallBatch(requests jsonrpc.RPCRequests) (jsonrpc.RPCResponses, error) {
	ret := _m.Called(requests)

	var r0 jsonrpc.RPCResponses
	if rf, ok := ret.Get(0).(func(jsonrpc.RPCRequests) jsonrpc.RPCResponses); ok {
		r0 = rf(requests)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jsonrpc.RPCResponses)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(jsonrpc.RPCRequests) error); ok {
		r1 = rf(requests)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CallBatchRaw provides a mock function with given fields: requests
func (_m *RPCClient) CallBatchRaw(requests jsonrpc.RPCRequests) (jsonrpc.RPCResponses, error) {
	ret := _m.Called(requests)

	var r0 jsonrpc.RPCResponses
	if rf, ok := ret.Get(0).(func(jsonrpc.RPCRequests) jsonrpc.RPCResponses); ok {
		r0 = rf(requests)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jsonrpc.RPCResponses)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(jsonrpc.RPCRequests) error); ok {
		r1 = rf(requests)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CallFor provides a mock function with given fields: out, method, params
func (_m *RPCClient) CallFor(out interface{}, method string, params ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, out, method)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...interface{}) error); ok {
		r0 = rf(out, method, params...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CallForWithContext provides a mock function with given fields: ctx, out, method, params
func (_m *RPCClient) CallForWithContext(ctx context.Context, out interface{}, method string, params ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, out, method)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, ...interface{}) error); ok {
		r0 = rf(ctx, out, method, params...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CallRaw provides a mock function with given fields: request
func (_m *RPCClient) CallRaw(request *jsonrpc.RPCRequest) (*jsonrpc.RPCResponse, error) {
	ret := _m.Called(request)

	var r0 *jsonrpc.RPCResponse
	if rf, ok := ret.Get(0).(func(*jsonrpc.RPCRequest) *jsonrpc.RPCResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jsonrpc.RPCResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*jsonrpc.RPCRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CallRawWithContext provides a mock function with given fields: ctx, request
func (_m *RPCClient) CallRawWithContext(ctx context.Context, request *jsonrpc.RPCRequest) (*jsonrpc.RPCResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *jsonrpc.RPCResponse
	if rf, ok := ret.Get(0).(func(context.Context, *jsonrpc.RPCRequest) *jsonrpc.RPCResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jsonrpc.RPCResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *jsonrpc.RPCRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CallWithContext provides a mock function with given fields: ctx, method, params
func (_m *RPCClient) CallWithContext(ctx context.Context, method string, params ...interface{}) (*jsonrpc.RPCResponse, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, method)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 *jsonrpc.RPCResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *jsonrpc.RPCResponse); ok {
		r0 = rf(ctx, method, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jsonrpc.RPCResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, method, params...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRPCClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewRPCClient creates a new instance of RPCClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRPCClient(t mockConstructorTestingTNewRPCClient) *RPCClient {
	mock := &RPCClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
