// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: supernode/service.proto

package supernode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SupernodeService_GetStatus_FullMethodName               = "/supernode.SupernodeService/GetStatus"
	SupernodeService_ListServices_FullMethodName            = "/supernode.SupernodeService/ListServices"
	SupernodeService_GetRawPprof_FullMethodName             = "/supernode.SupernodeService/GetRawPprof"
	SupernodeService_GetRawPprofHeap_FullMethodName         = "/supernode.SupernodeService/GetRawPprofHeap"
	SupernodeService_GetRawPprofGoroutine_FullMethodName    = "/supernode.SupernodeService/GetRawPprofGoroutine"
	SupernodeService_GetRawPprofAllocs_FullMethodName       = "/supernode.SupernodeService/GetRawPprofAllocs"
	SupernodeService_GetRawPprofBlock_FullMethodName        = "/supernode.SupernodeService/GetRawPprofBlock"
	SupernodeService_GetRawPprofMutex_FullMethodName        = "/supernode.SupernodeService/GetRawPprofMutex"
	SupernodeService_GetRawPprofThreadcreate_FullMethodName = "/supernode.SupernodeService/GetRawPprofThreadcreate"
	SupernodeService_GetRawPprofProfile_FullMethodName      = "/supernode.SupernodeService/GetRawPprofProfile"
	SupernodeService_GetRawPprofCmdline_FullMethodName      = "/supernode.SupernodeService/GetRawPprofCmdline"
	SupernodeService_GetRawPprofSymbol_FullMethodName       = "/supernode.SupernodeService/GetRawPprofSymbol"
	SupernodeService_GetRawPprofTrace_FullMethodName        = "/supernode.SupernodeService/GetRawPprofTrace"
)

// SupernodeServiceClient is the client API for SupernodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SupernodeService provides status information for all services
type SupernodeServiceClient interface {
	GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error)
	// Raw pprof endpoints - return standard pprof output directly
	GetRawPprof(ctx context.Context, in *RawPprofRequest, opts ...grpc.CallOption) (*RawPprofResponse, error)
	GetRawPprofHeap(ctx context.Context, in *RawPprofRequest, opts ...grpc.CallOption) (*RawPprofResponse, error)
	GetRawPprofGoroutine(ctx context.Context, in *RawPprofRequest, opts ...grpc.CallOption) (*RawPprofResponse, error)
	GetRawPprofAllocs(ctx context.Context, in *RawPprofRequest, opts ...grpc.CallOption) (*RawPprofResponse, error)
	GetRawPprofBlock(ctx context.Context, in *RawPprofRequest, opts ...grpc.CallOption) (*RawPprofResponse, error)
	GetRawPprofMutex(ctx context.Context, in *RawPprofRequest, opts ...grpc.CallOption) (*RawPprofResponse, error)
	GetRawPprofThreadcreate(ctx context.Context, in *RawPprofRequest, opts ...grpc.CallOption) (*RawPprofResponse, error)
	GetRawPprofProfile(ctx context.Context, in *RawPprofCpuRequest, opts ...grpc.CallOption) (*RawPprofResponse, error)
	GetRawPprofCmdline(ctx context.Context, in *RawPprofRequest, opts ...grpc.CallOption) (*RawPprofResponse, error)
	GetRawPprofSymbol(ctx context.Context, in *RawPprofRequest, opts ...grpc.CallOption) (*RawPprofResponse, error)
	GetRawPprofTrace(ctx context.Context, in *RawPprofRequest, opts ...grpc.CallOption) (*RawPprofResponse, error)
}

type supernodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSupernodeServiceClient(cc grpc.ClientConnInterface) SupernodeServiceClient {
	return &supernodeServiceClient{cc}
}

func (c *supernodeServiceClient) GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, SupernodeService_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supernodeServiceClient) ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListServicesResponse)
	err := c.cc.Invoke(ctx, SupernodeService_ListServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supernodeServiceClient) GetRawPprof(ctx context.Context, in *RawPprofRequest, opts ...grpc.CallOption) (*RawPprofResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RawPprofResponse)
	err := c.cc.Invoke(ctx, SupernodeService_GetRawPprof_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supernodeServiceClient) GetRawPprofHeap(ctx context.Context, in *RawPprofRequest, opts ...grpc.CallOption) (*RawPprofResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RawPprofResponse)
	err := c.cc.Invoke(ctx, SupernodeService_GetRawPprofHeap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supernodeServiceClient) GetRawPprofGoroutine(ctx context.Context, in *RawPprofRequest, opts ...grpc.CallOption) (*RawPprofResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RawPprofResponse)
	err := c.cc.Invoke(ctx, SupernodeService_GetRawPprofGoroutine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supernodeServiceClient) GetRawPprofAllocs(ctx context.Context, in *RawPprofRequest, opts ...grpc.CallOption) (*RawPprofResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RawPprofResponse)
	err := c.cc.Invoke(ctx, SupernodeService_GetRawPprofAllocs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supernodeServiceClient) GetRawPprofBlock(ctx context.Context, in *RawPprofRequest, opts ...grpc.CallOption) (*RawPprofResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RawPprofResponse)
	err := c.cc.Invoke(ctx, SupernodeService_GetRawPprofBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supernodeServiceClient) GetRawPprofMutex(ctx context.Context, in *RawPprofRequest, opts ...grpc.CallOption) (*RawPprofResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RawPprofResponse)
	err := c.cc.Invoke(ctx, SupernodeService_GetRawPprofMutex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supernodeServiceClient) GetRawPprofThreadcreate(ctx context.Context, in *RawPprofRequest, opts ...grpc.CallOption) (*RawPprofResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RawPprofResponse)
	err := c.cc.Invoke(ctx, SupernodeService_GetRawPprofThreadcreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supernodeServiceClient) GetRawPprofProfile(ctx context.Context, in *RawPprofCpuRequest, opts ...grpc.CallOption) (*RawPprofResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RawPprofResponse)
	err := c.cc.Invoke(ctx, SupernodeService_GetRawPprofProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supernodeServiceClient) GetRawPprofCmdline(ctx context.Context, in *RawPprofRequest, opts ...grpc.CallOption) (*RawPprofResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RawPprofResponse)
	err := c.cc.Invoke(ctx, SupernodeService_GetRawPprofCmdline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supernodeServiceClient) GetRawPprofSymbol(ctx context.Context, in *RawPprofRequest, opts ...grpc.CallOption) (*RawPprofResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RawPprofResponse)
	err := c.cc.Invoke(ctx, SupernodeService_GetRawPprofSymbol_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supernodeServiceClient) GetRawPprofTrace(ctx context.Context, in *RawPprofRequest, opts ...grpc.CallOption) (*RawPprofResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RawPprofResponse)
	err := c.cc.Invoke(ctx, SupernodeService_GetRawPprofTrace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SupernodeServiceServer is the server API for SupernodeService service.
// All implementations must embed UnimplementedSupernodeServiceServer
// for forward compatibility.
//
// SupernodeService provides status information for all services
type SupernodeServiceServer interface {
	GetStatus(context.Context, *StatusRequest) (*StatusResponse, error)
	ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error)
	// Raw pprof endpoints - return standard pprof output directly
	GetRawPprof(context.Context, *RawPprofRequest) (*RawPprofResponse, error)
	GetRawPprofHeap(context.Context, *RawPprofRequest) (*RawPprofResponse, error)
	GetRawPprofGoroutine(context.Context, *RawPprofRequest) (*RawPprofResponse, error)
	GetRawPprofAllocs(context.Context, *RawPprofRequest) (*RawPprofResponse, error)
	GetRawPprofBlock(context.Context, *RawPprofRequest) (*RawPprofResponse, error)
	GetRawPprofMutex(context.Context, *RawPprofRequest) (*RawPprofResponse, error)
	GetRawPprofThreadcreate(context.Context, *RawPprofRequest) (*RawPprofResponse, error)
	GetRawPprofProfile(context.Context, *RawPprofCpuRequest) (*RawPprofResponse, error)
	GetRawPprofCmdline(context.Context, *RawPprofRequest) (*RawPprofResponse, error)
	GetRawPprofSymbol(context.Context, *RawPprofRequest) (*RawPprofResponse, error)
	GetRawPprofTrace(context.Context, *RawPprofRequest) (*RawPprofResponse, error)
	mustEmbedUnimplementedSupernodeServiceServer()
}

// UnimplementedSupernodeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSupernodeServiceServer struct{}

func (UnimplementedSupernodeServiceServer) GetStatus(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedSupernodeServiceServer) ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (UnimplementedSupernodeServiceServer) GetRawPprof(context.Context, *RawPprofRequest) (*RawPprofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawPprof not implemented")
}
func (UnimplementedSupernodeServiceServer) GetRawPprofHeap(context.Context, *RawPprofRequest) (*RawPprofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawPprofHeap not implemented")
}
func (UnimplementedSupernodeServiceServer) GetRawPprofGoroutine(context.Context, *RawPprofRequest) (*RawPprofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawPprofGoroutine not implemented")
}
func (UnimplementedSupernodeServiceServer) GetRawPprofAllocs(context.Context, *RawPprofRequest) (*RawPprofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawPprofAllocs not implemented")
}
func (UnimplementedSupernodeServiceServer) GetRawPprofBlock(context.Context, *RawPprofRequest) (*RawPprofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawPprofBlock not implemented")
}
func (UnimplementedSupernodeServiceServer) GetRawPprofMutex(context.Context, *RawPprofRequest) (*RawPprofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawPprofMutex not implemented")
}
func (UnimplementedSupernodeServiceServer) GetRawPprofThreadcreate(context.Context, *RawPprofRequest) (*RawPprofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawPprofThreadcreate not implemented")
}
func (UnimplementedSupernodeServiceServer) GetRawPprofProfile(context.Context, *RawPprofCpuRequest) (*RawPprofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawPprofProfile not implemented")
}
func (UnimplementedSupernodeServiceServer) GetRawPprofCmdline(context.Context, *RawPprofRequest) (*RawPprofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawPprofCmdline not implemented")
}
func (UnimplementedSupernodeServiceServer) GetRawPprofSymbol(context.Context, *RawPprofRequest) (*RawPprofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawPprofSymbol not implemented")
}
func (UnimplementedSupernodeServiceServer) GetRawPprofTrace(context.Context, *RawPprofRequest) (*RawPprofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawPprofTrace not implemented")
}
func (UnimplementedSupernodeServiceServer) mustEmbedUnimplementedSupernodeServiceServer() {}
func (UnimplementedSupernodeServiceServer) testEmbeddedByValue()                          {}

// UnsafeSupernodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SupernodeServiceServer will
// result in compilation errors.
type UnsafeSupernodeServiceServer interface {
	mustEmbedUnimplementedSupernodeServiceServer()
}

func RegisterSupernodeServiceServer(s grpc.ServiceRegistrar, srv SupernodeServiceServer) {
	// If the following call pancis, it indicates UnimplementedSupernodeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SupernodeService_ServiceDesc, srv)
}

func _SupernodeService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupernodeServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupernodeService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupernodeServiceServer).GetStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupernodeService_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupernodeServiceServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupernodeService_ListServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupernodeServiceServer).ListServices(ctx, req.(*ListServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupernodeService_GetRawPprof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawPprofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupernodeServiceServer).GetRawPprof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupernodeService_GetRawPprof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupernodeServiceServer).GetRawPprof(ctx, req.(*RawPprofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupernodeService_GetRawPprofHeap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawPprofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupernodeServiceServer).GetRawPprofHeap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupernodeService_GetRawPprofHeap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupernodeServiceServer).GetRawPprofHeap(ctx, req.(*RawPprofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupernodeService_GetRawPprofGoroutine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawPprofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupernodeServiceServer).GetRawPprofGoroutine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupernodeService_GetRawPprofGoroutine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupernodeServiceServer).GetRawPprofGoroutine(ctx, req.(*RawPprofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupernodeService_GetRawPprofAllocs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawPprofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupernodeServiceServer).GetRawPprofAllocs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupernodeService_GetRawPprofAllocs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupernodeServiceServer).GetRawPprofAllocs(ctx, req.(*RawPprofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupernodeService_GetRawPprofBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawPprofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupernodeServiceServer).GetRawPprofBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupernodeService_GetRawPprofBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupernodeServiceServer).GetRawPprofBlock(ctx, req.(*RawPprofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupernodeService_GetRawPprofMutex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawPprofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupernodeServiceServer).GetRawPprofMutex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupernodeService_GetRawPprofMutex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupernodeServiceServer).GetRawPprofMutex(ctx, req.(*RawPprofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupernodeService_GetRawPprofThreadcreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawPprofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupernodeServiceServer).GetRawPprofThreadcreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupernodeService_GetRawPprofThreadcreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupernodeServiceServer).GetRawPprofThreadcreate(ctx, req.(*RawPprofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupernodeService_GetRawPprofProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawPprofCpuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupernodeServiceServer).GetRawPprofProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupernodeService_GetRawPprofProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupernodeServiceServer).GetRawPprofProfile(ctx, req.(*RawPprofCpuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupernodeService_GetRawPprofCmdline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawPprofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupernodeServiceServer).GetRawPprofCmdline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupernodeService_GetRawPprofCmdline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupernodeServiceServer).GetRawPprofCmdline(ctx, req.(*RawPprofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupernodeService_GetRawPprofSymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawPprofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupernodeServiceServer).GetRawPprofSymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupernodeService_GetRawPprofSymbol_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupernodeServiceServer).GetRawPprofSymbol(ctx, req.(*RawPprofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupernodeService_GetRawPprofTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawPprofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupernodeServiceServer).GetRawPprofTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupernodeService_GetRawPprofTrace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupernodeServiceServer).GetRawPprofTrace(ctx, req.(*RawPprofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SupernodeService_ServiceDesc is the grpc.ServiceDesc for SupernodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SupernodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "supernode.SupernodeService",
	HandlerType: (*SupernodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _SupernodeService_GetStatus_Handler,
		},
		{
			MethodName: "ListServices",
			Handler:    _SupernodeService_ListServices_Handler,
		},
		{
			MethodName: "GetRawPprof",
			Handler:    _SupernodeService_GetRawPprof_Handler,
		},
		{
			MethodName: "GetRawPprofHeap",
			Handler:    _SupernodeService_GetRawPprofHeap_Handler,
		},
		{
			MethodName: "GetRawPprofGoroutine",
			Handler:    _SupernodeService_GetRawPprofGoroutine_Handler,
		},
		{
			MethodName: "GetRawPprofAllocs",
			Handler:    _SupernodeService_GetRawPprofAllocs_Handler,
		},
		{
			MethodName: "GetRawPprofBlock",
			Handler:    _SupernodeService_GetRawPprofBlock_Handler,
		},
		{
			MethodName: "GetRawPprofMutex",
			Handler:    _SupernodeService_GetRawPprofMutex_Handler,
		},
		{
			MethodName: "GetRawPprofThreadcreate",
			Handler:    _SupernodeService_GetRawPprofThreadcreate_Handler,
		},
		{
			MethodName: "GetRawPprofProfile",
			Handler:    _SupernodeService_GetRawPprofProfile_Handler,
		},
		{
			MethodName: "GetRawPprofCmdline",
			Handler:    _SupernodeService_GetRawPprofCmdline_Handler,
		},
		{
			MethodName: "GetRawPprofSymbol",
			Handler:    _SupernodeService_GetRawPprofSymbol_Handler,
		},
		{
			MethodName: "GetRawPprofTrace",
			Handler:    _SupernodeService_GetRawPprofTrace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "supernode/service.proto",
}
