// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/supernode/action/cascade/service.proto

package cascade

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CascadeService_UploadInputData_FullMethodName = "/cascade.CascadeService/UploadInputData"
)

// CascadeServiceClient is the client API for CascadeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CascadeServiceClient interface {
	UploadInputData(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadInputDataRequest, UploadInputDataResponse], error)
}

type cascadeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCascadeServiceClient(cc grpc.ClientConnInterface) CascadeServiceClient {
	return &cascadeServiceClient{cc}
}

func (c *cascadeServiceClient) UploadInputData(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadInputDataRequest, UploadInputDataResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CascadeService_ServiceDesc.Streams[0], CascadeService_UploadInputData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadInputDataRequest, UploadInputDataResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CascadeService_UploadInputDataClient = grpc.ClientStreamingClient[UploadInputDataRequest, UploadInputDataResponse]

// CascadeServiceServer is the server API for CascadeService service.
// All implementations must embed UnimplementedCascadeServiceServer
// for forward compatibility.
type CascadeServiceServer interface {
	UploadInputData(grpc.ClientStreamingServer[UploadInputDataRequest, UploadInputDataResponse]) error
	mustEmbedUnimplementedCascadeServiceServer()
}

// UnimplementedCascadeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCascadeServiceServer struct{}

func (UnimplementedCascadeServiceServer) UploadInputData(grpc.ClientStreamingServer[UploadInputDataRequest, UploadInputDataResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadInputData not implemented")
}
func (UnimplementedCascadeServiceServer) mustEmbedUnimplementedCascadeServiceServer() {}
func (UnimplementedCascadeServiceServer) testEmbeddedByValue()                        {}

// UnsafeCascadeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CascadeServiceServer will
// result in compilation errors.
type UnsafeCascadeServiceServer interface {
	mustEmbedUnimplementedCascadeServiceServer()
}

func RegisterCascadeServiceServer(s grpc.ServiceRegistrar, srv CascadeServiceServer) {
	// If the following call pancis, it indicates UnimplementedCascadeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CascadeService_ServiceDesc, srv)
}

func _CascadeService_UploadInputData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CascadeServiceServer).UploadInputData(&grpc.GenericServerStream[UploadInputDataRequest, UploadInputDataResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CascadeService_UploadInputDataServer = grpc.ClientStreamingServer[UploadInputDataRequest, UploadInputDataResponse]

// CascadeService_ServiceDesc is the grpc.ServiceDesc for CascadeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CascadeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cascade.CascadeService",
	HandlerType: (*CascadeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadInputData",
			Handler:       _CascadeService_UploadInputData_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/supernode/action/cascade/service.proto",
}
