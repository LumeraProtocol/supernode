// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/supernode/supernode/cascade_service.proto

package supernode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CascadeService_Session_FullMethodName                    = "/supernode.CascadeService/Session"
	CascadeService_SendCascadeTicketSignature_FullMethodName = "/supernode.CascadeService/SendCascadeTicketSignature"
)

// CascadeServiceClient is the client API for CascadeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CascadeServiceClient interface {
	// Session informs primary supernode about its `nodeID` and `sessID` it wants to connect to.
	// The stream is used by the parties to inform each other about the cancellation of the task.
	Session(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SessionRequest, SessionReply], error)
	// SendSenseTicketSignature send signature from supernodes mn2/mn3 for given reg NFT session id to primary supernode
	SendCascadeTicketSignature(ctx context.Context, in *SendTicketSignatureRequest, opts ...grpc.CallOption) (*SendTicketSignatureReply, error)
}

type cascadeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCascadeServiceClient(cc grpc.ClientConnInterface) CascadeServiceClient {
	return &cascadeServiceClient{cc}
}

func (c *cascadeServiceClient) Session(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SessionRequest, SessionReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CascadeService_ServiceDesc.Streams[0], CascadeService_Session_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SessionRequest, SessionReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CascadeService_SessionClient = grpc.BidiStreamingClient[SessionRequest, SessionReply]

func (c *cascadeServiceClient) SendCascadeTicketSignature(ctx context.Context, in *SendTicketSignatureRequest, opts ...grpc.CallOption) (*SendTicketSignatureReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendTicketSignatureReply)
	err := c.cc.Invoke(ctx, CascadeService_SendCascadeTicketSignature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CascadeServiceServer is the server API for CascadeService service.
// All implementations must embed UnimplementedCascadeServiceServer
// for forward compatibility.
type CascadeServiceServer interface {
	// Session informs primary supernode about its `nodeID` and `sessID` it wants to connect to.
	// The stream is used by the parties to inform each other about the cancellation of the task.
	Session(grpc.BidiStreamingServer[SessionRequest, SessionReply]) error
	// SendSenseTicketSignature send signature from supernodes mn2/mn3 for given reg NFT session id to primary supernode
	SendCascadeTicketSignature(context.Context, *SendTicketSignatureRequest) (*SendTicketSignatureReply, error)
	mustEmbedUnimplementedCascadeServiceServer()
}

// UnimplementedCascadeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCascadeServiceServer struct{}

func (UnimplementedCascadeServiceServer) Session(grpc.BidiStreamingServer[SessionRequest, SessionReply]) error {
	return status.Errorf(codes.Unimplemented, "method Session not implemented")
}
func (UnimplementedCascadeServiceServer) SendCascadeTicketSignature(context.Context, *SendTicketSignatureRequest) (*SendTicketSignatureReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCascadeTicketSignature not implemented")
}
func (UnimplementedCascadeServiceServer) mustEmbedUnimplementedCascadeServiceServer() {}
func (UnimplementedCascadeServiceServer) testEmbeddedByValue()                        {}

// UnsafeCascadeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CascadeServiceServer will
// result in compilation errors.
type UnsafeCascadeServiceServer interface {
	mustEmbedUnimplementedCascadeServiceServer()
}

func RegisterCascadeServiceServer(s grpc.ServiceRegistrar, srv CascadeServiceServer) {
	// If the following call pancis, it indicates UnimplementedCascadeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CascadeService_ServiceDesc, srv)
}

func _CascadeService_Session_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CascadeServiceServer).Session(&grpc.GenericServerStream[SessionRequest, SessionReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CascadeService_SessionServer = grpc.BidiStreamingServer[SessionRequest, SessionReply]

func _CascadeService_SendCascadeTicketSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTicketSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CascadeServiceServer).SendCascadeTicketSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CascadeService_SendCascadeTicketSignature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CascadeServiceServer).SendCascadeTicketSignature(ctx, req.(*SendTicketSignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CascadeService_ServiceDesc is the grpc.ServiceDesc for CascadeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CascadeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "supernode.CascadeService",
	HandlerType: (*CascadeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendCascadeTicketSignature",
			Handler:    _CascadeService_SendCascadeTicketSignature_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Session",
			Handler:       _CascadeService_Session_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/supernode/supernode/cascade_service.proto",
}
