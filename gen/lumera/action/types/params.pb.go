// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lumera/action/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	// Fees
	BaseActionFee types.Coin `protobuf:"bytes,1,opt,name=base_action_fee,json=baseActionFee,proto3" json:"base_action_fee"`
	FeePerByte    types.Coin `protobuf:"bytes,2,opt,name=fee_per_byte,json=feePerByte,proto3" json:"fee_per_byte"`
	// Limits
	MaxActionsPerBlock   uint64 `protobuf:"varint,3,opt,name=max_actions_per_block,json=maxActionsPerBlock,proto3" json:"max_actions_per_block,omitempty"`
	MinSuperNodes        uint64 `protobuf:"varint,4,opt,name=min_super_nodes,json=minSuperNodes,proto3" json:"min_super_nodes,omitempty"`
	MaxDdAndFingerprints uint64 `protobuf:"varint,5,opt,name=max_dd_and_fingerprints,json=maxDdAndFingerprints,proto3" json:"max_dd_and_fingerprints,omitempty"`
	MaxRaptorQSymbols    uint64 `protobuf:"varint,6,opt,name=max_raptor_q_symbols,json=maxRaptorQSymbols,proto3" json:"max_raptor_q_symbols,omitempty"`
	// Time Constraints
	ExpirationDuration time.Duration `protobuf:"bytes,7,opt,name=expiration_duration,json=expirationDuration,proto3,stdduration" json:"expiration_duration"`
	MinProcessingTime  time.Duration `protobuf:"bytes,8,opt,name=min_processing_time,json=minProcessingTime,proto3,stdduration" json:"min_processing_time"`
	MaxProcessingTime  time.Duration `protobuf:"bytes,9,opt,name=max_processing_time,json=maxProcessingTime,proto3,stdduration" json:"max_processing_time"`
	// Reward Distribution
	SuperNodeFeeShare  string `protobuf:"bytes,10,opt,name=super_node_fee_share,json=superNodeFeeShare,proto3" json:"super_node_fee_share,omitempty"`
	FoundationFeeShare string `protobuf:"bytes,11,opt,name=foundation_fee_share,json=foundationFeeShare,proto3" json:"foundation_fee_share,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca2bc6adab8bf575, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetBaseActionFee() types.Coin {
	if m != nil {
		return m.BaseActionFee
	}
	return types.Coin{}
}

func (m *Params) GetFeePerByte() types.Coin {
	if m != nil {
		return m.FeePerByte
	}
	return types.Coin{}
}

func (m *Params) GetMaxActionsPerBlock() uint64 {
	if m != nil {
		return m.MaxActionsPerBlock
	}
	return 0
}

func (m *Params) GetMinSuperNodes() uint64 {
	if m != nil {
		return m.MinSuperNodes
	}
	return 0
}

func (m *Params) GetMaxDdAndFingerprints() uint64 {
	if m != nil {
		return m.MaxDdAndFingerprints
	}
	return 0
}

func (m *Params) GetMaxRaptorQSymbols() uint64 {
	if m != nil {
		return m.MaxRaptorQSymbols
	}
	return 0
}

func (m *Params) GetExpirationDuration() time.Duration {
	if m != nil {
		return m.ExpirationDuration
	}
	return 0
}

func (m *Params) GetMinProcessingTime() time.Duration {
	if m != nil {
		return m.MinProcessingTime
	}
	return 0
}

func (m *Params) GetMaxProcessingTime() time.Duration {
	if m != nil {
		return m.MaxProcessingTime
	}
	return 0
}

func (m *Params) GetSuperNodeFeeShare() string {
	if m != nil {
		return m.SuperNodeFeeShare
	}
	return ""
}

func (m *Params) GetFoundationFeeShare() string {
	if m != nil {
		return m.FoundationFeeShare
	}
	return ""
}

func init() {
	proto.RegisterType((*Params)(nil), "lumera.action.Params")
}

func init() { proto.RegisterFile("lumera/action/params.proto", fileDescriptor_ca2bc6adab8bf575) }

var fileDescriptor_ca2bc6adab8bf575 = []byte{
	// 581 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x3f, 0x6f, 0xd4, 0x3c,
	0x18, 0xbf, 0xbc, 0x6f, 0x39, 0x5a, 0x97, 0x52, 0x9d, 0x7b, 0x88, 0xb4, 0x43, 0xae, 0x62, 0x40,
	0x15, 0x12, 0xb1, 0x0a, 0x62, 0x61, 0x81, 0x1e, 0xd5, 0x49, 0x48, 0x15, 0x3a, 0xee, 0x3a, 0xb1,
	0x58, 0x4e, 0xf2, 0x24, 0x35, 0x9c, 0xed, 0x60, 0x27, 0x28, 0x37, 0xf2, 0x0d, 0x18, 0x19, 0x19,
	0x19, 0x19, 0xf8, 0x10, 0x1d, 0x2b, 0x26, 0xa6, 0x82, 0xda, 0x01, 0xc4, 0xa7, 0x40, 0x8e, 0x13,
	0x8a, 0xaa, 0x4a, 0xc0, 0x12, 0xc5, 0xcf, 0xef, 0xcf, 0xf3, 0xd8, 0x3f, 0x1b, 0x6d, 0xcc, 0x4a,
	0x01, 0x9a, 0x11, 0x16, 0x17, 0x5c, 0x49, 0x92, 0x33, 0xcd, 0x84, 0x09, 0x73, 0xad, 0x0a, 0x85,
	0x57, 0x1c, 0x16, 0x3a, 0x6c, 0x63, 0x3d, 0x56, 0x46, 0x28, 0x43, 0x6b, 0x90, 0xb8, 0x85, 0x63,
	0x6e, 0x04, 0x6e, 0x45, 0x22, 0x66, 0x80, 0xbc, 0xda, 0x8e, 0xa0, 0x60, 0xdb, 0x24, 0x56, 0x5c,
	0x36, 0x78, 0x3f, 0x53, 0x99, 0x72, 0x3a, 0xfb, 0xd7, 0xaa, 0x32, 0xa5, 0xb2, 0x19, 0x90, 0x7a,
	0x15, 0x95, 0x29, 0x49, 0x4a, 0xcd, 0x6c, 0xab, 0x06, 0xef, 0x31, 0xc1, 0xa5, 0x22, 0xf5, 0xd7,
	0x95, 0x6e, 0xbc, 0xee, 0xa2, 0xee, 0xb8, 0x9e, 0x11, 0xef, 0xa1, 0x55, 0xdb, 0x8e, 0xba, 0xe9,
	0x68, 0x0a, 0xe0, 0x7b, 0x9b, 0xde, 0xd6, 0xf2, 0x9d, 0xf5, 0xb0, 0x99, 0xcd, 0xc2, 0x61, 0x33,
	0x4d, 0xf8, 0x48, 0x71, 0x39, 0x5c, 0x3a, 0x3c, 0x1e, 0x74, 0xde, 0x7f, 0xfb, 0x70, 0xcb, 0x9b,
	0xac, 0x58, 0x74, 0xa7, 0xd6, 0x8e, 0x00, 0xf0, 0x08, 0x5d, 0x49, 0x01, 0x68, 0x0e, 0x9a, 0x46,
	0xf3, 0x02, 0xfc, 0xff, 0xfe, 0xc1, 0x0a, 0xa5, 0x00, 0x63, 0xd0, 0xc3, 0x79, 0x01, 0x78, 0x1b,
	0x5d, 0x13, 0xac, 0x6a, 0x86, 0x32, 0xce, 0x6f, 0xa6, 0xe2, 0x17, 0xfe, 0xff, 0x9b, 0xde, 0xd6,
	0xc2, 0x04, 0x0b, 0x56, 0xb9, 0xa6, 0xc6, 0x2a, 0x2c, 0x82, 0x6f, 0xa2, 0x55, 0xc1, 0x25, 0x35,
	0xa5, 0x25, 0x4b, 0x95, 0x80, 0xf1, 0x17, 0x6a, 0xf2, 0x8a, 0xe0, 0x72, 0x6a, 0xab, 0x4f, 0x6c,
	0x11, 0xdf, 0x43, 0xd7, 0xad, 0x75, 0x92, 0x50, 0x26, 0x13, 0x9a, 0x72, 0x99, 0x81, 0xce, 0x35,
	0x97, 0x85, 0xf1, 0x2f, 0xd5, 0xfc, 0xbe, 0x60, 0xd5, 0x6e, 0xb2, 0x23, 0x93, 0xd1, 0x6f, 0x18,
	0x26, 0xc8, 0xd6, 0xa9, 0x66, 0x79, 0xa1, 0x34, 0x7d, 0x49, 0xcd, 0x5c, 0x44, 0x6a, 0x66, 0xfc,
	0x6e, 0xad, 0xe9, 0x09, 0x56, 0x4d, 0x6a, 0xe8, 0xe9, 0xd4, 0x01, 0x78, 0x1f, 0xad, 0x41, 0x95,
	0x73, 0x17, 0x05, 0x6d, 0x33, 0xf1, 0x2f, 0x37, 0x27, 0xe2, 0x42, 0x0b, 0xdb, 0xd0, 0xc2, 0xdd,
	0x86, 0x30, 0x5c, 0xb4, 0x27, 0xf2, 0xf6, 0xcb, 0xc0, 0x9b, 0xe0, 0x33, 0x7d, 0x8b, 0xe2, 0x29,
	0x5a, 0xb3, 0xbb, 0xcc, 0xb5, 0x8a, 0xc1, 0x18, 0x2e, 0x33, 0x5a, 0x70, 0x01, 0xfe, 0xe2, 0xdf,
	0xbb, 0xf6, 0x04, 0x97, 0xe3, 0x5f, 0xf2, 0x7d, 0x2e, 0x00, 0x3f, 0x47, 0x6b, 0x76, 0x6f, 0xe7,
	0x4d, 0x97, 0xfe, 0x64, 0x3a, 0xb0, 0xa6, 0x3f, 0x8e, 0x07, 0x17, 0xa9, 0x9b, 0x5e, 0xac, 0x3a,
	0xd7, 0xeb, 0x01, 0xea, 0x9f, 0x45, 0x64, 0xaf, 0x1b, 0x35, 0x07, 0x4c, 0x83, 0x8f, 0x36, 0xbd,
	0xad, 0xa5, 0xe1, 0xd5, 0x4f, 0x1f, 0x6f, 0xa3, 0xe6, 0xb2, 0xec, 0x42, 0x3c, 0xe9, 0x99, 0x36,
	0xb8, 0x11, 0xc0, 0xd4, 0x12, 0xf1, 0x43, 0xd4, 0x4f, 0x55, 0x29, 0x13, 0xd6, 0xde, 0xd7, 0xc6,
	0x60, 0xf9, 0x42, 0x03, 0x7c, 0xc6, 0x6d, 0x1d, 0xee, 0x2f, 0x7c, 0x7f, 0x37, 0xf0, 0x86, 0x8f,
	0x0f, 0x4f, 0x02, 0xef, 0xe8, 0x24, 0xf0, 0xbe, 0x9e, 0x04, 0xde, 0x9b, 0xd3, 0xa0, 0x73, 0x74,
	0x1a, 0x74, 0x3e, 0x9f, 0x06, 0x9d, 0x67, 0x24, 0xe3, 0xc5, 0x41, 0x19, 0x85, 0xb1, 0x12, 0x64,
	0xaf, 0x7e, 0xbb, 0x63, 0xbb, 0xf5, 0x58, 0xcd, 0x48, 0xf3, 0xcc, 0xab, 0xf6, 0xa1, 0x17, 0xf3,
	0x1c, 0x4c, 0xd4, 0xad, 0x8f, 0xe6, 0xee, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x68, 0x4b, 0x4a,
	0xd7, 0x06, 0x04, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BaseActionFee.Equal(&that1.BaseActionFee) {
		return false
	}
	if !this.FeePerByte.Equal(&that1.FeePerByte) {
		return false
	}
	if this.MaxActionsPerBlock != that1.MaxActionsPerBlock {
		return false
	}
	if this.MinSuperNodes != that1.MinSuperNodes {
		return false
	}
	if this.MaxDdAndFingerprints != that1.MaxDdAndFingerprints {
		return false
	}
	if this.MaxRaptorQSymbols != that1.MaxRaptorQSymbols {
		return false
	}
	if this.ExpirationDuration != that1.ExpirationDuration {
		return false
	}
	if this.MinProcessingTime != that1.MinProcessingTime {
		return false
	}
	if this.MaxProcessingTime != that1.MaxProcessingTime {
		return false
	}
	if this.SuperNodeFeeShare != that1.SuperNodeFeeShare {
		return false
	}
	if this.FoundationFeeShare != that1.FoundationFeeShare {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FoundationFeeShare) > 0 {
		i -= len(m.FoundationFeeShare)
		copy(dAtA[i:], m.FoundationFeeShare)
		i = encodeVarintParams(dAtA, i, uint64(len(m.FoundationFeeShare)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.SuperNodeFeeShare) > 0 {
		i -= len(m.SuperNodeFeeShare)
		copy(dAtA[i:], m.SuperNodeFeeShare)
		i = encodeVarintParams(dAtA, i, uint64(len(m.SuperNodeFeeShare)))
		i--
		dAtA[i] = 0x52
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.MaxProcessingTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.MaxProcessingTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintParams(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x4a
	n2, err2 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.MinProcessingTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.MinProcessingTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintParams(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x42
	n3, err3 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.ExpirationDuration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.ExpirationDuration):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintParams(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x3a
	if m.MaxRaptorQSymbols != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxRaptorQSymbols))
		i--
		dAtA[i] = 0x30
	}
	if m.MaxDdAndFingerprints != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxDdAndFingerprints))
		i--
		dAtA[i] = 0x28
	}
	if m.MinSuperNodes != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MinSuperNodes))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxActionsPerBlock != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxActionsPerBlock))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.FeePerByte.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.BaseActionFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BaseActionFee.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.FeePerByte.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.MaxActionsPerBlock != 0 {
		n += 1 + sovParams(uint64(m.MaxActionsPerBlock))
	}
	if m.MinSuperNodes != 0 {
		n += 1 + sovParams(uint64(m.MinSuperNodes))
	}
	if m.MaxDdAndFingerprints != 0 {
		n += 1 + sovParams(uint64(m.MaxDdAndFingerprints))
	}
	if m.MaxRaptorQSymbols != 0 {
		n += 1 + sovParams(uint64(m.MaxRaptorQSymbols))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.ExpirationDuration)
	n += 1 + l + sovParams(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.MinProcessingTime)
	n += 1 + l + sovParams(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.MaxProcessingTime)
	n += 1 + l + sovParams(uint64(l))
	l = len(m.SuperNodeFeeShare)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.FoundationFeeShare)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseActionFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseActionFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePerByte", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeePerByte.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxActionsPerBlock", wireType)
			}
			m.MaxActionsPerBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxActionsPerBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSuperNodes", wireType)
			}
			m.MinSuperNodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinSuperNodes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDdAndFingerprints", wireType)
			}
			m.MaxDdAndFingerprints = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDdAndFingerprints |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRaptorQSymbols", wireType)
			}
			m.MaxRaptorQSymbols = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRaptorQSymbols |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.ExpirationDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinProcessingTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.MinProcessingTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxProcessingTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.MaxProcessingTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuperNodeFeeShare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuperNodeFeeShare = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FoundationFeeShare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FoundationFeeShare = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
