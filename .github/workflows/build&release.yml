name: Build and Release Workflow
on:
  push:
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  pull_request:
    branches: [ master ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  packages: read

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Go and dependencies
        uses: ./.github/actions/setup-env
        
      - name: Build binaries
        run: |
          # Build supernode
          CGO_ENABLED=1 go build -trimpath -o /tmp/supernode ./supernode
          
          # Build sn-manager  
          cd sn-manager
          CGO_ENABLED=0 go build -trimpath -o /tmp/sn-manager .
          
          echo "âœ… Build successful"

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-22.04
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get tag information
        id: tag_info
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          
          TAG_MESSAGE=$(git tag -l --format='%(contents)' $TAG_NAME)
          if [ -z "$TAG_MESSAGE" ]; then
            TAG_MESSAGE="Release $TAG_NAME"
          fi
          {
            echo "tag_message<<GHOEOF"
            echo "$TAG_MESSAGE"
            echo "GHOEOF"
          } >> "$GITHUB_OUTPUT"

      - name: Setup Go and dependencies
        uses: ./.github/actions/setup-env

      - name: Prepare Release Variables
        id: vars
        run: |
          VERSION=${{ steps.tag_info.outputs.tag_name }}
          GIT_COMMIT=$(git rev-parse --short HEAD)
          BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S')
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "git_commit=$GIT_COMMIT" >> $GITHUB_OUTPUT
          echo "build_time=$BUILD_TIME" >> $GITHUB_OUTPUT
          echo "binary_name=supernode-linux-amd64" >> $GITHUB_OUTPUT

      - name: Build Release Version
        run: |
          mkdir -p release
          
          # Build supernode
          CGO_ENABLED=1 \
          GOOS=linux \
          GOARCH=amd64 \
          go build \
          -trimpath \
          -ldflags="-s -w \
                    -X github.com/LumeraProtocol/supernode/v2/supernode/cmd.Version=${{ steps.vars.outputs.version }} \
                    -X github.com/LumeraProtocol/supernode/v2/supernode/cmd.GitCommit=${{ steps.vars.outputs.git_commit }} \
                    -X github.com/LumeraProtocol/supernode/v2/supernode/cmd.BuildTime=${{ steps.vars.outputs.build_time }}" \
          -o release/supernode \
          ./supernode
          
          # Build sn-manager
          cd sn-manager
          CGO_ENABLED=0 \
          GOOS=linux \
          GOARCH=amd64 \
          go build \
          -trimpath \
          -ldflags="-s -w \
                    -X main.Version=${{ steps.vars.outputs.version }} \
                    -X main.GitCommit=${{ steps.vars.outputs.git_commit }} \
                    -X main.BuildTime=${{ steps.vars.outputs.build_time }}" \
          -o ../release/sn-manager \
          .
          cd ..
          
          chmod +x release/supernode release/sn-manager
          
          # Create tarball
          cd release
          tar -czf ${{ steps.vars.outputs.binary_name }}.tar.gz supernode sn-manager
          cd ..
          
          cp release/supernode release/${{ steps.vars.outputs.binary_name }}

      - name: Generate auto release notes
        id: auto_notes
        uses: actions/github-script@v7
        env:
          TAG_NAME: ${{ steps.tag_info.outputs.tag_name }}
        with:
          script: |
            const { owner, repo } = context.repo;
            const tag_name = process.env.TAG_NAME;
            const res = await github.request('POST /repos/{owner}/{repo}/releases/generate-notes', {
              owner,
              repo,
              tag_name
            });
            core.setOutput('body', res.data.body || '');

      - name: Prepare Release Body
        id: rel_body
        run: |
          cat > /tmp/REL_BODY <<'EOT'
          IMPORTANT: sn-manager setup and auto-update guide:
          https://github.com/LumeraProtocol/supernode/blob/master/sn-manager/README.md

          ${{ steps.tag_info.outputs.tag_message }}

          ---
          Auto-generated release notes:
          ${{ steps.auto_notes.outputs.body }}
          EOT
          {
            echo "body<<GHOEOF"
            cat /tmp/REL_BODY
            echo "GHOEOF"
          } >> "$GITHUB_OUTPUT"

      - name: Publish the Release
        uses: softprops/action-gh-release@v0.1.15
        if: success()
        with:
          tag_name: ${{ steps.tag_info.outputs.tag_name }}
          files: |
            release/${{ steps.vars.outputs.binary_name }}.tar.gz
            release/${{ steps.vars.outputs.binary_name }}
          body: ${{ steps.rel_body.outputs.body }}
          token: ${{ secrets.GITHUB_TOKEN }}
