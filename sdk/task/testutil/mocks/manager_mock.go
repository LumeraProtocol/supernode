// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	event "github.com/LumeraProtocol/supernode/sdk/event"
	mock "github.com/stretchr/testify/mock"

	task "github.com/LumeraProtocol/supernode/sdk/task"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// CreateCascadeTask provides a mock function with given fields: ctx, data, actionID
func (_m *Manager) CreateCascadeTask(ctx context.Context, data []byte, actionID string) (string, error) {
	ret := _m.Called(ctx, data, actionID)

	if len(ret) == 0 {
		panic("no return value specified for CreateCascadeTask")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, string) (string, error)); ok {
		return rf(ctx, data, actionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, string) string); ok {
		r0 = rf(ctx, data, actionID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte, string) error); ok {
		r1 = rf(ctx, data, actionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTask provides a mock function with given fields: ctx, taskID
func (_m *Manager) DeleteTask(ctx context.Context, taskID string) error {
	ret := _m.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, taskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTask provides a mock function with given fields: ctx, taskID
func (_m *Manager) GetTask(ctx context.Context, taskID string) (*task.TaskEntry, bool) {
	ret := _m.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 *task.TaskEntry
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) (*task.TaskEntry, bool)); ok {
		return rf(ctx, taskID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *task.TaskEntry); ok {
		r0 = rf(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*task.TaskEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) bool); ok {
		r1 = rf(ctx, taskID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// SubscribeToAllEvents provides a mock function with given fields: ctx, handler
func (_m *Manager) SubscribeToAllEvents(ctx context.Context, handler event.Handler) {
	_m.Called(ctx, handler)
}

// SubscribeToEvents provides a mock function with given fields: ctx, eventType, handler
func (_m *Manager) SubscribeToEvents(ctx context.Context, eventType event.EventType, handler event.Handler) {
	_m.Called(ctx, eventType, handler)
}

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
