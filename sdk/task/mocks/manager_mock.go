// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go
//
// Generated by this command:
//
//	mockgen -source=manager.go -destination=mocks/manager_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	event "github.com/LumeraProtocol/supernode/sdk/event"
	task "github.com/LumeraProtocol/supernode/sdk/task"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
	isgomock struct{}
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// CreateCascadeTask mocks base method.
func (m *MockManager) CreateCascadeTask(ctx context.Context, data []byte, actionID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCascadeTask", ctx, data, actionID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCascadeTask indicates an expected call of CreateCascadeTask.
func (mr *MockManagerMockRecorder) CreateCascadeTask(ctx, data, actionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCascadeTask", reflect.TypeOf((*MockManager)(nil).CreateCascadeTask), ctx, data, actionID)
}

// DeleteTask mocks base method.
func (m *MockManager) DeleteTask(ctx context.Context, taskID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", ctx, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockManagerMockRecorder) DeleteTask(ctx, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockManager)(nil).DeleteTask), ctx, taskID)
}

// GetTask mocks base method.
func (m *MockManager) GetTask(ctx context.Context, taskID string) (*task.TaskEntry, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", ctx, taskID)
	ret0, _ := ret[0].(*task.TaskEntry)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockManagerMockRecorder) GetTask(ctx, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockManager)(nil).GetTask), ctx, taskID)
}

// SubscribeToAllEvents mocks base method.
func (m *MockManager) SubscribeToAllEvents(ctx context.Context, handler event.Handler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubscribeToAllEvents", ctx, handler)
}

// SubscribeToAllEvents indicates an expected call of SubscribeToAllEvents.
func (mr *MockManagerMockRecorder) SubscribeToAllEvents(ctx, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToAllEvents", reflect.TypeOf((*MockManager)(nil).SubscribeToAllEvents), ctx, handler)
}

// SubscribeToEvents mocks base method.
func (m *MockManager) SubscribeToEvents(ctx context.Context, eventType event.EventType, handler event.Handler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubscribeToEvents", ctx, eventType, handler)
}

// SubscribeToEvents indicates an expected call of SubscribeToEvents.
func (mr *MockManagerMockRecorder) SubscribeToEvents(ctx, eventType, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToEvents", reflect.TypeOf((*MockManager)(nil).SubscribeToEvents), ctx, eventType, handler)
}
