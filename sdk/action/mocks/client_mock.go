// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -destination=mocks/client_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	event "github.com/LumeraProtocol/supernode/sdk/event"
	task "github.com/LumeraProtocol/supernode/sdk/task"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// DeleteTask mocks base method.
func (m *MockClient) DeleteTask(ctx context.Context, taskID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", ctx, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockClientMockRecorder) DeleteTask(ctx, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockClient)(nil).DeleteTask), ctx, taskID)
}

// GetTask mocks base method.
func (m *MockClient) GetTask(ctx context.Context, taskID string) (*task.TaskEntry, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", ctx, taskID)
	ret0, _ := ret[0].(*task.TaskEntry)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockClientMockRecorder) GetTask(ctx, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockClient)(nil).GetTask), ctx, taskID)
}

// StartCascade mocks base method.
func (m *MockClient) StartCascade(ctx context.Context, data []byte, actionID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCascade", ctx, data, actionID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartCascade indicates an expected call of StartCascade.
func (mr *MockClientMockRecorder) StartCascade(ctx, data, actionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCascade", reflect.TypeOf((*MockClient)(nil).StartCascade), ctx, data, actionID)
}

// SubscribeToAllEvents mocks base method.
func (m *MockClient) SubscribeToAllEvents(ctx context.Context, handler event.Handler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToAllEvents", ctx, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeToAllEvents indicates an expected call of SubscribeToAllEvents.
func (mr *MockClientMockRecorder) SubscribeToAllEvents(ctx, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToAllEvents", reflect.TypeOf((*MockClient)(nil).SubscribeToAllEvents), ctx, handler)
}

// SubscribeToEvents mocks base method.
func (m *MockClient) SubscribeToEvents(ctx context.Context, eventType event.EventType, handler event.Handler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToEvents", ctx, eventType, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeToEvents indicates an expected call of SubscribeToEvents.
func (mr *MockClientMockRecorder) SubscribeToEvents(ctx, eventType, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToEvents", reflect.TypeOf((*MockClient)(nil).SubscribeToEvents), ctx, eventType, handler)
}
