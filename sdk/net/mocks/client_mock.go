// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -destination=mocks/client_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	supernodeservice "github.com/LumeraProtocol/supernode/sdk/adapters/supernodeservice"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	grpc_health_v1 "google.golang.org/grpc/health/grpc_health_v1"
)

// MockSupernodeClient is a mock of SupernodeClient interface.
type MockSupernodeClient struct {
	ctrl     *gomock.Controller
	recorder *MockSupernodeClientMockRecorder
	isgomock struct{}
}

// MockSupernodeClientMockRecorder is the mock recorder for MockSupernodeClient.
type MockSupernodeClientMockRecorder struct {
	mock *MockSupernodeClient
}

// NewMockSupernodeClient creates a new mock instance.
func NewMockSupernodeClient(ctrl *gomock.Controller) *MockSupernodeClient {
	mock := &MockSupernodeClient{ctrl: ctrl}
	mock.recorder = &MockSupernodeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSupernodeClient) EXPECT() *MockSupernodeClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSupernodeClient) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSupernodeClientMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSupernodeClient)(nil).Close), ctx)
}

// HealthCheck mocks base method.
func (m *MockSupernodeClient) HealthCheck(ctx context.Context) (*grpc_health_v1.HealthCheckResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", ctx)
	ret0, _ := ret[0].(*grpc_health_v1.HealthCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockSupernodeClientMockRecorder) HealthCheck(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockSupernodeClient)(nil).HealthCheck), ctx)
}

// RegisterCascade mocks base method.
func (m *MockSupernodeClient) RegisterCascade(ctx context.Context, in *supernodeservice.CascadeSupernodeRegisterRequest, opts ...grpc.CallOption) (*supernodeservice.CascadeSupernodeRegisterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterCascade", varargs...)
	ret0, _ := ret[0].(*supernodeservice.CascadeSupernodeRegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterCascade indicates an expected call of RegisterCascade.
func (mr *MockSupernodeClientMockRecorder) RegisterCascade(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCascade", reflect.TypeOf((*MockSupernodeClient)(nil).RegisterCascade), varargs...)
}
