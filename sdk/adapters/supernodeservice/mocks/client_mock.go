// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -destination=mocks/client_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	supernodeservice "github.com/LumeraProtocol/supernode/sdk/adapters/supernodeservice"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockCascadeServiceClient is a mock of CascadeServiceClient interface.
type MockCascadeServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCascadeServiceClientMockRecorder
	isgomock struct{}
}

// MockCascadeServiceClientMockRecorder is the mock recorder for MockCascadeServiceClient.
type MockCascadeServiceClientMockRecorder struct {
	mock *MockCascadeServiceClient
}

// NewMockCascadeServiceClient creates a new mock instance.
func NewMockCascadeServiceClient(ctrl *gomock.Controller) *MockCascadeServiceClient {
	mock := &MockCascadeServiceClient{ctrl: ctrl}
	mock.recorder = &MockCascadeServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCascadeServiceClient) EXPECT() *MockCascadeServiceClientMockRecorder {
	return m.recorder
}

// CascadeSupernodeRegister mocks base method.
func (m *MockCascadeServiceClient) CascadeSupernodeRegister(ctx context.Context, in *supernodeservice.CascadeSupernodeRegisterRequest, opts ...grpc.CallOption) (*supernodeservice.CascadeSupernodeRegisterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CascadeSupernodeRegister", varargs...)
	ret0, _ := ret[0].(*supernodeservice.CascadeSupernodeRegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CascadeSupernodeRegister indicates an expected call of CascadeSupernodeRegister.
func (mr *MockCascadeServiceClientMockRecorder) CascadeSupernodeRegister(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CascadeSupernodeRegister", reflect.TypeOf((*MockCascadeServiceClient)(nil).CascadeSupernodeRegister), varargs...)
}
