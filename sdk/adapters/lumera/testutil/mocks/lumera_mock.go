// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	lumera "github.com/LumeraProtocol/supernode/sdk/adapters/lumera"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// GetAction provides a mock function with given fields: ctx, actionID
func (_m *Client) GetAction(ctx context.Context, actionID string) (lumera.Action, error) {
	ret := _m.Called(ctx, actionID)

	if len(ret) == 0 {
		panic("no return value specified for GetAction")
	}

	var r0 lumera.Action
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (lumera.Action, error)); ok {
		return rf(ctx, actionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) lumera.Action); ok {
		r0 = rf(ctx, actionID)
	} else {
		r0 = ret.Get(0).(lumera.Action)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, actionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSupernodes provides a mock function with given fields: ctx, height
func (_m *Client) GetSupernodes(ctx context.Context, height int64) ([]lumera.Supernode, error) {
	ret := _m.Called(ctx, height)

	if len(ret) == 0 {
		panic("no return value specified for GetSupernodes")
	}

	var r0 []lumera.Supernode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]lumera.Supernode, error)); ok {
		return rf(ctx, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []lumera.Supernode); ok {
		r0 = rf(ctx, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]lumera.Supernode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
