// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// SvcInterface is an autogenerated mock type for the SvcInterface type
type SvcInterface struct {
	mock.Mock
}

// Run provides a mock function with given fields: ctx
func (_m *SvcInterface) Run(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stats provides a mock function with given fields: ctx
func (_m *SvcInterface) Stats(ctx context.Context) (map[string]interface{}, error) {
	ret := _m.Called(ctx)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]interface{}); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSvcInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewSvcInterface creates a new instance of SvcInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSvcInterface(t mockConstructorTestingTNewSvcInterface) *SvcInterface {
	mock := &SvcInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
