// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/LumeraProtocol/supernode/common/types"
)

// HermesP2PInterface is an autogenerated mock type for the HermesP2PInterface type
type HermesP2PInterface struct {
	mock.Mock
}

// AcceptedNodes provides a mock function with given fields: ctx
func (_m *HermesP2PInterface) AcceptedNodes(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConnectTo provides a mock function with given fields: ctx, primaryNode
func (_m *HermesP2PInterface) ConnectTo(ctx context.Context, primaryNode types.MeshedSuperNode) error {
	ret := _m.Called(ctx, primaryNode)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.MeshedSuperNode) error); ok {
		r0 = rf(ctx, primaryNode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, key
func (_m *HermesP2PInterface) Delete(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MeshNodes provides a mock function with given fields: ctx, meshedNodes
func (_m *HermesP2PInterface) MeshNodes(ctx context.Context, meshedNodes []types.MeshedSuperNode) error {
	ret := _m.Called(ctx, meshedNodes)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []types.MeshedSuperNode) error); ok {
		r0 = rf(ctx, meshedNodes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Retrieve provides a mock function with given fields: ctx, key
func (_m *HermesP2PInterface) Retrieve(ctx context.Context, key string) ([]byte, error) {
	ret := _m.Called(ctx, key)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessID provides a mock function with given fields:
func (_m *HermesP2PInterface) SessID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Session provides a mock function with given fields: ctx, IsPrimary
func (_m *HermesP2PInterface) Session(ctx context.Context, IsPrimary bool) error {
	ret := _m.Called(ctx, IsPrimary)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) error); ok {
		r0 = rf(ctx, IsPrimary)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewHermesP2PInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewHermesP2PInterface creates a new instance of HermesP2PInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHermesP2PInterface(t mockConstructorTestingTNewHermesP2PInterface) *HermesP2PInterface {
	mock := &HermesP2PInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
