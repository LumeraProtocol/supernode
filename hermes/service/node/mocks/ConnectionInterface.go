// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	node "github.com/LumeraProtocol/supernode/hermes/service/node"
	mock "github.com/stretchr/testify/mock"
)

// ConnectionInterface is an autogenerated mock type for the ConnectionInterface type
type ConnectionInterface struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *ConnectionInterface) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Done provides a mock function with given fields:
func (_m *ConnectionInterface) Done() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// DownloadNft provides a mock function with given fields:
func (_m *ConnectionInterface) DownloadNft() node.DownloadNftInterface {
	ret := _m.Called()

	var r0 node.DownloadNftInterface
	if rf, ok := ret.Get(0).(func() node.DownloadNftInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(node.DownloadNftInterface)
		}
	}

	return r0
}

// HermesP2P provides a mock function with given fields:
func (_m *ConnectionInterface) HermesP2P() node.HermesP2PInterface {
	ret := _m.Called()

	var r0 node.HermesP2PInterface
	if rf, ok := ret.Get(0).(func() node.HermesP2PInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(node.HermesP2PInterface)
		}
	}

	return r0
}

// RegisterNft provides a mock function with given fields:
func (_m *ConnectionInterface) RegisterNft() node.RegisterNftInterface {
	ret := _m.Called()

	var r0 node.RegisterNftInterface
	if rf, ok := ret.Get(0).(func() node.RegisterNftInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(node.RegisterNftInterface)
		}
	}

	return r0
}

type mockConstructorTestingTNewConnectionInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewConnectionInterface creates a new instance of ConnectionInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConnectionInterface(t mockConstructorTestingTNewConnectionInterface) *ConnectionInterface {
	mock := &ConnectionInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
