// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	node "github.com/LumeraProtocol/supernode/hermes/service/node"
	mock "github.com/stretchr/testify/mock"
)

// SNClientInterface is an autogenerated mock type for the SNClientInterface type
type SNClientInterface struct {
	mock.Mock
}

// Connect provides a mock function with given fields: ctx, address
func (_m *SNClientInterface) Connect(ctx context.Context, address string) (node.ConnectionInterface, error) {
	ret := _m.Called(ctx, address)

	var r0 node.ConnectionInterface
	if rf, ok := ret.Get(0).(func(context.Context, string) node.ConnectionInterface); ok {
		r0 = rf(ctx, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(node.ConnectionInterface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSNClientInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewSNClientInterface creates a new instance of SNClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSNClientInterface(t mockConstructorTestingTNewSNClientInterface) *SNClientInterface {
	mock := &SNClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
