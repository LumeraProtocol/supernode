// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	dupedetection "github.com/LumeraProtocol/supernode/common/dupedetection"

	mock "github.com/stretchr/testify/mock"

	pastel "github.com/LumeraProtocol/supernode/pastel"
)

// DDServerClient is an autogenerated mock type for the DDServerClient type
type DDServerClient struct {
	mock.Mock
}

// GetStats provides a mock function with given fields: ctx
func (_m *DDServerClient) GetStats(ctx context.Context) (dupedetection.DDServerStats, error) {
	ret := _m.Called(ctx)

	var r0 dupedetection.DDServerStats
	if rf, ok := ret.Get(0).(func(context.Context) dupedetection.DDServerStats); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(dupedetection.DDServerStats)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImageRarenessScore provides a mock function with given fields: ctx, img, format, blockHash, blockHeight, timestamp, pastelID, supernode1, supernode2, supernode3, openAPIRequest, groupID, collectionName
func (_m *DDServerClient) ImageRarenessScore(ctx context.Context, img []byte, format string, blockHash string, blockHeight string, timestamp string, pastelID string, supernode1 string, supernode2 string, supernode3 string, openAPIRequest bool, groupID string, collectionName string) (*pastel.DDAndFingerprints, error) {
	ret := _m.Called(ctx, img, format, blockHash, blockHeight, timestamp, pastelID, supernode1, supernode2, supernode3, openAPIRequest, groupID, collectionName)

	var r0 *pastel.DDAndFingerprints
	if rf, ok := ret.Get(0).(func(context.Context, []byte, string, string, string, string, string, string, string, string, bool, string, string) *pastel.DDAndFingerprints); ok {
		r0 = rf(ctx, img, format, blockHash, blockHeight, timestamp, pastelID, supernode1, supernode2, supernode3, openAPIRequest, groupID, collectionName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pastel.DDAndFingerprints)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []byte, string, string, string, string, string, string, string, string, bool, string, string) error); ok {
		r1 = rf(ctx, img, format, blockHash, blockHeight, timestamp, pastelID, supernode1, supernode2, supernode3, openAPIRequest, groupID, collectionName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDDServerClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewDDServerClient creates a new instance of DDServerClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDDServerClient(t mockConstructorTestingTNewDDServerClient) *DDServerClient {
	mock := &DDServerClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
