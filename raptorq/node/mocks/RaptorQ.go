// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	node "github.com/LumeraProtocol/supernode/raptorq/node"
	mock "github.com/stretchr/testify/mock"

	rqstore "github.com/LumeraProtocol/supernode/common/storage/rqstore"
)

// RaptorQ is an autogenerated mock type for the RaptorQ type
type RaptorQ struct {
	mock.Mock
}

// Decode provides a mock function with given fields: ctx, encodeInfo
func (_m *RaptorQ) Decode(ctx context.Context, encodeInfo *node.Encode) (*node.Decode, error) {
	ret := _m.Called(ctx, encodeInfo)

	var r0 *node.Decode
	if rf, ok := ret.Get(0).(func(context.Context, *node.Encode) *node.Decode); ok {
		r0 = rf(ctx, encodeInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*node.Decode)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *node.Encode) error); ok {
		r1 = rf(ctx, encodeInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EncodeInfo provides a mock function with given fields: ctx, data, copies, blockHash, pastelID
func (_m *RaptorQ) EncodeInfo(ctx context.Context, data []byte, copies uint32, blockHash string, pastelID string) (*node.EncodeInfo, error) {
	ret := _m.Called(ctx, data, copies, blockHash, pastelID)

	var r0 *node.EncodeInfo
	if rf, ok := ret.Get(0).(func(context.Context, []byte, uint32, string, string) *node.EncodeInfo); ok {
		r0 = rf(ctx, data, copies, blockHash, pastelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*node.EncodeInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []byte, uint32, string, string) error); ok {
		r1 = rf(ctx, data, copies, blockHash, pastelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RQEncode provides a mock function with given fields: ctx, data, txID, store
func (_m *RaptorQ) RQEncode(ctx context.Context, data []byte, txID string, store rqstore.Store) (*node.Encode, error) {
	ret := _m.Called(ctx, data, txID, store)

	var r0 *node.Encode
	if rf, ok := ret.Get(0).(func(context.Context, []byte, string, rqstore.Store) *node.Encode); ok {
		r0 = rf(ctx, data, txID, store)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*node.Encode)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []byte, string, rqstore.Store) error); ok {
		r1 = rf(ctx, data, txID, store)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRaptorQ interface {
	mock.TestingT
	Cleanup(func())
}

// NewRaptorQ creates a new instance of RaptorQ. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRaptorQ(t mockConstructorTestingTNewRaptorQ) *RaptorQ {
	mock := &RaptorQ{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
