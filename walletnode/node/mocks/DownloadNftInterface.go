// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/LumeraProtocol/supernode/common/types"

	walletnode "github.com/LumeraProtocol/supernode/proto/walletnode"
)

// DownloadNftInterface is an autogenerated mock type for the DownloadNftInterface type
type DownloadNftInterface struct {
	mock.Mock
}

// AcceptedNodes provides a mock function with given fields: ctx
func (_m *DownloadNftInterface) AcceptedNodes(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *DownloadNftInterface) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConnectTo provides a mock function with given fields: ctx, primaryNode
func (_m *DownloadNftInterface) ConnectTo(ctx context.Context, primaryNode types.MeshedSuperNode) error {
	ret := _m.Called(ctx, primaryNode)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.MeshedSuperNode) error); ok {
		r0 = rf(ctx, primaryNode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Download provides a mock function with given fields: ctx, txid, timestamp, signature, ttxid, ttype, hashOnly
func (_m *DownloadNftInterface) Download(ctx context.Context, txid string, timestamp string, signature string, ttxid string, ttype string, hashOnly bool) ([]byte, error) {
	ret := _m.Called(ctx, txid, timestamp, signature, ttxid, ttype, hashOnly)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, bool) []byte); ok {
		r0 = rf(ctx, txid, timestamp, signature, ttxid, ttype, hashOnly)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, string, bool) error); ok {
		r1 = rf(ctx, txid, timestamp, signature, ttxid, ttype, hashOnly)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DownloadDDAndFingerprints provides a mock function with given fields: ctx, txid
func (_m *DownloadNftInterface) DownloadDDAndFingerprints(ctx context.Context, txid string) ([]byte, error) {
	ret := _m.Called(ctx, txid)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, txid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, txid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DownloadThumbnail provides a mock function with given fields: ctx, txid, numNails
func (_m *DownloadNftInterface) DownloadThumbnail(ctx context.Context, txid string, numNails int) (map[int][]byte, error) {
	ret := _m.Called(ctx, txid, numNails)

	var r0 map[int][]byte
	if rf, ok := ret.Get(0).(func(context.Context, string, int) map[int][]byte); ok {
		r0 = rf(ctx, txid, numNails)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int][]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, txid, numNails)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDDServerStats provides a mock function with given fields: ctx
func (_m *DownloadNftInterface) GetDDServerStats(ctx context.Context) (*walletnode.DDServerStatsReply, error) {
	ret := _m.Called(ctx)

	var r0 *walletnode.DDServerStatsReply
	if rf, ok := ret.Get(0).(func(context.Context) *walletnode.DDServerStatsReply); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*walletnode.DDServerStatsReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDupeDetectionDBHash provides a mock function with given fields: ctx
func (_m *DownloadNftInterface) GetDupeDetectionDBHash(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopMNs provides a mock function with given fields: ctx, block
func (_m *DownloadNftInterface) GetTopMNs(ctx context.Context, block int) (*walletnode.GetTopMNsReply, error) {
	ret := _m.Called(ctx, block)

	var r0 *walletnode.GetTopMNsReply
	if rf, ok := ret.Get(0).(func(context.Context, int) *walletnode.GetTopMNsReply); ok {
		r0 = rf(ctx, block)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*walletnode.GetTopMNsReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, block)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MeshNodes provides a mock function with given fields: ctx, meshedNodes
func (_m *DownloadNftInterface) MeshNodes(ctx context.Context, meshedNodes []types.MeshedSuperNode) error {
	ret := _m.Called(ctx, meshedNodes)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []types.MeshedSuperNode) error); ok {
		r0 = rf(ctx, meshedNodes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessID provides a mock function with given fields:
func (_m *DownloadNftInterface) SessID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Session provides a mock function with given fields: ctx, IsPrimary
func (_m *DownloadNftInterface) Session(ctx context.Context, IsPrimary bool) error {
	ret := _m.Called(ctx, IsPrimary)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) error); ok {
		r0 = rf(ctx, IsPrimary)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDownloadNftInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewDownloadNftInterface creates a new instance of DownloadNftInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDownloadNftInterface(t mockConstructorTestingTNewDownloadNftInterface) *DownloadNftInterface {
	mock := &DownloadNftInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
