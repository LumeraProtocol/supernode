// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/LumeraProtocol/supernode/common/types"

	userdata "github.com/LumeraProtocol/supernode/common/service/userdata"

	walletnode "github.com/LumeraProtocol/supernode/proto/walletnode"
)

// ProcessUserdataInterface is an autogenerated mock type for the ProcessUserdataInterface type
type ProcessUserdataInterface struct {
	mock.Mock
}

// AcceptedNodes provides a mock function with given fields: ctx
func (_m *ProcessUserdataInterface) AcceptedNodes(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConnectTo provides a mock function with given fields: ctx, primaryNode
func (_m *ProcessUserdataInterface) ConnectTo(ctx context.Context, primaryNode types.MeshedSuperNode) error {
	ret := _m.Called(ctx, primaryNode)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.MeshedSuperNode) error); ok {
		r0 = rf(ctx, primaryNode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDDServerStats provides a mock function with given fields: ctx
func (_m *ProcessUserdataInterface) GetDDServerStats(ctx context.Context) (*walletnode.DDServerStatsReply, error) {
	ret := _m.Called(ctx)

	var r0 *walletnode.DDServerStatsReply
	if rf, ok := ret.Get(0).(func(context.Context) *walletnode.DDServerStatsReply); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*walletnode.DDServerStatsReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDupeDetectionDBHash provides a mock function with given fields: ctx
func (_m *ProcessUserdataInterface) GetDupeDetectionDBHash(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopMNs provides a mock function with given fields: ctx, block
func (_m *ProcessUserdataInterface) GetTopMNs(ctx context.Context, block int) (*walletnode.GetTopMNsReply, error) {
	ret := _m.Called(ctx, block)

	var r0 *walletnode.GetTopMNsReply
	if rf, ok := ret.Get(0).(func(context.Context, int) *walletnode.GetTopMNsReply); ok {
		r0 = rf(ctx, block)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*walletnode.GetTopMNsReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, block)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MeshNodes provides a mock function with given fields: ctx, meshedNodes
func (_m *ProcessUserdataInterface) MeshNodes(ctx context.Context, meshedNodes []types.MeshedSuperNode) error {
	ret := _m.Called(ctx, meshedNodes)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []types.MeshedSuperNode) error); ok {
		r0 = rf(ctx, meshedNodes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RetrieveUserdata provides a mock function with given fields: ctx, userpastelid
func (_m *ProcessUserdataInterface) RetrieveUserdata(ctx context.Context, userpastelid string) (*userdata.ProcessRequest, error) {
	ret := _m.Called(ctx, userpastelid)

	var r0 *userdata.ProcessRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) *userdata.ProcessRequest); ok {
		r0 = rf(ctx, userpastelid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userdata.ProcessRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userpastelid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendUserdata provides a mock function with given fields: ctx, request
func (_m *ProcessUserdataInterface) SendUserdata(ctx context.Context, request *userdata.ProcessRequestSigned) (*userdata.ProcessResult, error) {
	ret := _m.Called(ctx, request)

	var r0 *userdata.ProcessResult
	if rf, ok := ret.Get(0).(func(context.Context, *userdata.ProcessRequestSigned) *userdata.ProcessResult); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userdata.ProcessResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *userdata.ProcessRequestSigned) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessID provides a mock function with given fields:
func (_m *ProcessUserdataInterface) SessID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Session provides a mock function with given fields: ctx, IsPrimary
func (_m *ProcessUserdataInterface) Session(ctx context.Context, IsPrimary bool) error {
	ret := _m.Called(ctx, IsPrimary)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) error); ok {
		r0 = rf(ctx, IsPrimary)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewProcessUserdataInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewProcessUserdataInterface creates a new instance of ProcessUserdataInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProcessUserdataInterface(t mockConstructorTestingTNewProcessUserdataInterface) *ProcessUserdataInterface {
	mock := &ProcessUserdataInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
