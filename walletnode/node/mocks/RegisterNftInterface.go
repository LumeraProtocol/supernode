// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	files "github.com/LumeraProtocol/supernode/common/storage/files"
	mock "github.com/stretchr/testify/mock"

	raptorqnode "github.com/LumeraProtocol/supernode/raptorq/node"

	types "github.com/LumeraProtocol/supernode/common/types"

	walletnode "github.com/LumeraProtocol/supernode/proto/walletnode"
)

// RegisterNftInterface is an autogenerated mock type for the RegisterNftInterface type
type RegisterNftInterface struct {
	mock.Mock
}

// AcceptedNodes provides a mock function with given fields: ctx
func (_m *RegisterNftInterface) AcceptedNodes(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConnectTo provides a mock function with given fields: ctx, primaryNode
func (_m *RegisterNftInterface) ConnectTo(ctx context.Context, primaryNode types.MeshedSuperNode) error {
	ret := _m.Called(ctx, primaryNode)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.MeshedSuperNode) error); ok {
		r0 = rf(ctx, primaryNode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDDServerStats provides a mock function with given fields: ctx
func (_m *RegisterNftInterface) GetDDServerStats(ctx context.Context) (*walletnode.DDServerStatsReply, error) {
	ret := _m.Called(ctx)

	var r0 *walletnode.DDServerStatsReply
	if rf, ok := ret.Get(0).(func(context.Context) *walletnode.DDServerStatsReply); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*walletnode.DDServerStatsReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDupeDetectionDBHash provides a mock function with given fields: ctx
func (_m *RegisterNftInterface) GetDupeDetectionDBHash(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopMNs provides a mock function with given fields: ctx, block
func (_m *RegisterNftInterface) GetTopMNs(ctx context.Context, block int) (*walletnode.GetTopMNsReply, error) {
	ret := _m.Called(ctx, block)

	var r0 *walletnode.GetTopMNsReply
	if rf, ok := ret.Get(0).(func(context.Context, int) *walletnode.GetTopMNsReply); ok {
		r0 = rf(ctx, block)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*walletnode.GetTopMNsReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, block)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MeshNodes provides a mock function with given fields: ctx, meshedNodes
func (_m *RegisterNftInterface) MeshNodes(ctx context.Context, meshedNodes []types.MeshedSuperNode) error {
	ret := _m.Called(ctx, meshedNodes)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []types.MeshedSuperNode) error); ok {
		r0 = rf(ctx, meshedNodes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProbeImage provides a mock function with given fields: ctx, image
func (_m *RegisterNftInterface) ProbeImage(ctx context.Context, image *files.File) ([]byte, bool, bool, error) {
	ret := _m.Called(ctx, image)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, *files.File) []byte); ok {
		r0 = rf(ctx, image)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(context.Context, *files.File) bool); ok {
		r1 = rf(ctx, image)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 bool
	if rf, ok := ret.Get(2).(func(context.Context, *files.File) bool); ok {
		r2 = rf(ctx, image)
	} else {
		r2 = ret.Get(2).(bool)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, *files.File) error); ok {
		r3 = rf(ctx, image)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// SendPreBurntFeeTxid provides a mock function with given fields: ctx, txid
func (_m *RegisterNftInterface) SendPreBurntFeeTxid(ctx context.Context, txid string) (string, error) {
	ret := _m.Called(ctx, txid)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, txid)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, txid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendRegMetadata provides a mock function with given fields: ctx, regMetadata
func (_m *RegisterNftInterface) SendRegMetadata(ctx context.Context, regMetadata *types.NftRegMetadata) error {
	ret := _m.Called(ctx, regMetadata)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.NftRegMetadata) error); ok {
		r0 = rf(ctx, regMetadata)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendSignedTicket provides a mock function with given fields: ctx, ticket, signature, label, rqIdsFile, ddFpFile, encoderParams
func (_m *RegisterNftInterface) SendSignedTicket(ctx context.Context, ticket []byte, signature []byte, label string, rqIdsFile []byte, ddFpFile []byte, encoderParams raptorqnode.EncoderParameters) (int64, error) {
	ret := _m.Called(ctx, ticket, signature, label, rqIdsFile, ddFpFile, encoderParams)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, []byte, []byte, string, []byte, []byte, raptorqnode.EncoderParameters) int64); ok {
		r0 = rf(ctx, ticket, signature, label, rqIdsFile, ddFpFile, encoderParams)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []byte, []byte, string, []byte, []byte, raptorqnode.EncoderParameters) error); ok {
		r1 = rf(ctx, ticket, signature, label, rqIdsFile, ddFpFile, encoderParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessID provides a mock function with given fields:
func (_m *RegisterNftInterface) SessID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Session provides a mock function with given fields: ctx, IsPrimary
func (_m *RegisterNftInterface) Session(ctx context.Context, IsPrimary bool) error {
	ret := _m.Called(ctx, IsPrimary)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) error); ok {
		r0 = rf(ctx, IsPrimary)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadImageWithThumbnail provides a mock function with given fields: ctx, image, thumbnail
func (_m *RegisterNftInterface) UploadImageWithThumbnail(ctx context.Context, image *files.File, thumbnail files.ThumbnailCoordinate) ([]byte, []byte, []byte, error) {
	ret := _m.Called(ctx, image, thumbnail)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, *files.File, files.ThumbnailCoordinate) []byte); ok {
		r0 = rf(ctx, image, thumbnail)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 []byte
	if rf, ok := ret.Get(1).(func(context.Context, *files.File, files.ThumbnailCoordinate) []byte); ok {
		r1 = rf(ctx, image, thumbnail)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	var r2 []byte
	if rf, ok := ret.Get(2).(func(context.Context, *files.File, files.ThumbnailCoordinate) []byte); ok {
		r2 = rf(ctx, image, thumbnail)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]byte)
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, *files.File, files.ThumbnailCoordinate) error); ok {
		r3 = rf(ctx, image, thumbnail)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

type mockConstructorTestingTNewRegisterNftInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewRegisterNftInterface creates a new instance of RegisterNftInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRegisterNftInterface(t mockConstructorTestingTNewRegisterNftInterface) *RegisterNftInterface {
	mock := &RegisterNftInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
