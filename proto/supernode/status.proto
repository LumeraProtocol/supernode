syntax = "proto3";
package supernode;
option go_package = "github.com/LumeraProtocol/supernode/v2/gen/supernode";

// StatusRequest controls optional metrics in the status response
message StatusRequest {
  // Optional: include detailed P2P metrics in the response
  // Maps to query param via grpc-gateway: /api/v1/status?include_p2p_metrics=true
  bool include_p2p_metrics = 1;
}

// The StatusResponse represents system status with clear organization
message StatusResponse {
  string version = 1;                        // Supernode version
  uint64 uptime_seconds = 2;                 // Uptime in seconds
  
  // System resource information
  message Resources {
    message CPU {
      double usage_percent = 1;  // CPU usage percentage (0-100)
      int32 cores = 2;           // Number of CPU cores
    }
    
    message Memory {
      double total_gb = 1;       // Total memory in GB
      double used_gb = 2;        // Used memory in GB
      double available_gb = 3;   // Available memory in GB
      double usage_percent = 4;  // Memory usage percentage (0-100)
    }
    
    message Storage {
      string path = 1;           // Storage path being monitored
      uint64 total_bytes = 2;
      uint64 used_bytes = 3;
      uint64 available_bytes = 4;
      double usage_percent = 5;  // Storage usage percentage (0-100)
    }
    
    CPU cpu = 1;
    Memory memory = 2;
    repeated Storage storage_volumes = 3;
    string hardware_summary = 4;  // Formatted hardware summary (e.g., "8 cores / 32GB RAM")
  }
  
  // ServiceTasks contains task information for a specific service
  message ServiceTasks {
    string service_name = 1;
    repeated string task_ids = 2;
    int32 task_count = 3;
  }

  // Network information
  message Network {
    int32 peers_count = 1;               // Number of connected peers in P2P network
    repeated string peer_addresses = 2;  // List of connected peer addresses (optional, may be empty for privacy)
  }
  
  Resources resources = 3;
  repeated ServiceTasks running_tasks = 4;  // Services with currently running tasks
  repeated string registered_services = 5;   // All registered/available services
  Network network = 6;                      // P2P network information
  int32 rank = 7;                           // Rank in the top supernodes list (0 if not in top list)
  string ip_address = 8;                    // Supernode IP address with port (e.g., "192.168.1.1:4445")

  // P2P metrics and diagnostics (additive field)
  message P2PMetrics {
    // Rolling DHT metrics snapshot
    message DhtMetrics {
      message StoreSuccessPoint {
        int64 time_unix = 1;     // event time (unix seconds)
        int32 requests = 2;      // total node RPCs attempted
        int32 successful = 3;    // successful node RPCs
        double success_rate = 4; // percentage (0-100)
      }

      message BatchRetrievePoint {
        int64 time_unix = 1;        // event time (unix seconds)
        int32 keys = 2;             // keys requested
        int32 required = 3;         // required count
        int32 found_local = 4;      // found locally
        int32 found_network = 5;    // found on network
        int64 duration_ms = 6;      // duration in milliseconds
      }

      repeated StoreSuccessPoint store_success_recent = 1;
      repeated BatchRetrievePoint batch_retrieve_recent = 2;

      int64 hot_path_banned_skips = 3;    // counter
      int64 hot_path_ban_increments = 4;  // counter
    }

    // Per-handler counters from network layer
    message HandleCounters {
      int64 total = 1;
      int64 success = 2;
      int64 failure = 3;
      int64 timeout = 4;
    }

    // Ban list entry
    message BanEntry {
      string id = 1;          // printable ID
      string ip = 2;          // last seen IP
      uint32 port = 3;        // last seen port
      int32 count = 4;        // failure count
      int64 created_at_unix = 5;  // first ban time (unix seconds)
      int64 age_seconds = 6;      // age in seconds
    }

    // DB stats
    message DatabaseStats {
      double p2p_db_size_mb = 1;
      int64 p2p_db_records_count = 2;
    }

    // Disk status
    message DiskStatus {
      double all_mb = 1;
      double used_mb = 2;
      double free_mb = 3;
    }

    DhtMetrics dht_metrics = 1;
    map<string, HandleCounters> network_handle_metrics = 2;
    map<string, int64> conn_pool_metrics = 3;
    repeated BanEntry ban_list = 4;
    DatabaseStats database = 5;
    DiskStatus disk = 6;
  }
  
  P2PMetrics p2p_metrics = 9;
}
