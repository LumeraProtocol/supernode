// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package cascademocks is a generated GoMock package.
package cascademocks

import (
	context "context"
	reflect "reflect"

	cascade "github.com/LumeraProtocol/supernode/supernode/services/cascade"
	gomock "github.com/golang/mock/gomock"
)

// MockTaskFactory is a mock of TaskFactory interface.
type MockTaskFactory struct {
	ctrl     *gomock.Controller
	recorder *MockTaskFactoryMockRecorder
}

// MockTaskFactoryMockRecorder is the mock recorder for MockTaskFactory.
type MockTaskFactoryMockRecorder struct {
	mock *MockTaskFactory
}

// NewMockTaskFactory creates a new mock instance.
func NewMockTaskFactory(ctrl *gomock.Controller) *MockTaskFactory {
	mock := &MockTaskFactory{ctrl: ctrl}
	mock.recorder = &MockTaskFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskFactory) EXPECT() *MockTaskFactoryMockRecorder {
	return m.recorder
}

// NewCascadeRegistrationTask mocks base method.
func (m *MockTaskFactory) NewCascadeRegistrationTask() cascade.RegistrationTaskService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCascadeRegistrationTask")
	ret0, _ := ret[0].(cascade.RegistrationTaskService)
	return ret0
}

// NewCascadeRegistrationTask indicates an expected call of NewCascadeRegistrationTask.
func (mr *MockTaskFactoryMockRecorder) NewCascadeRegistrationTask() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCascadeRegistrationTask", reflect.TypeOf((*MockTaskFactory)(nil).NewCascadeRegistrationTask))
}

// MockRegistrationTaskService is a mock of RegistrationTaskService interface.
type MockRegistrationTaskService struct {
	ctrl     *gomock.Controller
	recorder *MockRegistrationTaskServiceMockRecorder
}

// MockRegistrationTaskServiceMockRecorder is the mock recorder for MockRegistrationTaskService.
type MockRegistrationTaskServiceMockRecorder struct {
	mock *MockRegistrationTaskService
}

// NewMockRegistrationTaskService creates a new mock instance.
func NewMockRegistrationTaskService(ctrl *gomock.Controller) *MockRegistrationTaskService {
	mock := &MockRegistrationTaskService{ctrl: ctrl}
	mock.recorder = &MockRegistrationTaskServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistrationTaskService) EXPECT() *MockRegistrationTaskServiceMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockRegistrationTaskService) Register(ctx context.Context, req *cascade.RegisterRequest, send func(*cascade.RegisterResponse) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, req, send)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockRegistrationTaskServiceMockRecorder) Register(ctx, req, send interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegistrationTaskService)(nil).Register), ctx, req, send)
}
