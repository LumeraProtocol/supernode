// Code generated by MockGen. DO NOT EDIT.
// Source: lumera.go

// Package cascadeadaptormocks is a generated GoMock package.
package cascadeadaptormocks

import (
	context "context"
	reflect "reflect"

	types "github.com/LumeraProtocol/lumera/x/action/types"
	types0 "github.com/LumeraProtocol/lumera/x/supernode/types"
	action_msg "github.com/LumeraProtocol/supernode/pkg/lumera/modules/action_msg"
	gomock "github.com/golang/mock/gomock"
)

// MockLumeraClient is a mock of LumeraClient interface.
type MockLumeraClient struct {
	ctrl     *gomock.Controller
	recorder *MockLumeraClientMockRecorder
}

// MockLumeraClientMockRecorder is the mock recorder for MockLumeraClient.
type MockLumeraClientMockRecorder struct {
	mock *MockLumeraClient
}

// NewMockLumeraClient creates a new mock instance.
func NewMockLumeraClient(ctrl *gomock.Controller) *MockLumeraClient {
	mock := &MockLumeraClient{ctrl: ctrl}
	mock.recorder = &MockLumeraClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLumeraClient) EXPECT() *MockLumeraClientMockRecorder {
	return m.recorder
}

// FinalizeAction mocks base method.
func (m *MockLumeraClient) FinalizeAction(ctx context.Context, actionID string, rqids []string) (*action_msg.FinalizeActionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeAction", ctx, actionID, rqids)
	ret0, _ := ret[0].(*action_msg.FinalizeActionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinalizeAction indicates an expected call of FinalizeAction.
func (mr *MockLumeraClientMockRecorder) FinalizeAction(ctx, actionID, rqids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeAction", reflect.TypeOf((*MockLumeraClient)(nil).FinalizeAction), ctx, actionID, rqids)
}

// GetAction mocks base method.
func (m *MockLumeraClient) GetAction(ctx context.Context, actionID string) (*types.QueryGetActionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAction", ctx, actionID)
	ret0, _ := ret[0].(*types.QueryGetActionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAction indicates an expected call of GetAction.
func (mr *MockLumeraClientMockRecorder) GetAction(ctx, actionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAction", reflect.TypeOf((*MockLumeraClient)(nil).GetAction), ctx, actionID)
}

// GetActionParams mocks base method.
func (m *MockLumeraClient) GetActionParams(ctx context.Context) (*types.QueryParamsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionParams", ctx)
	ret0, _ := ret[0].(*types.QueryParamsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActionParams indicates an expected call of GetActionParams.
func (mr *MockLumeraClientMockRecorder) GetActionParams(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionParams", reflect.TypeOf((*MockLumeraClient)(nil).GetActionParams), ctx)
}

// GetTopSupernodes mocks base method.
func (m *MockLumeraClient) GetTopSupernodes(ctx context.Context, height uint64) (*types0.QueryGetTopSuperNodesForBlockResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopSupernodes", ctx, height)
	ret0, _ := ret[0].(*types0.QueryGetTopSuperNodesForBlockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopSupernodes indicates an expected call of GetTopSupernodes.
func (mr *MockLumeraClientMockRecorder) GetTopSupernodes(ctx, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopSupernodes", reflect.TypeOf((*MockLumeraClient)(nil).GetTopSupernodes), ctx, height)
}

// Verify mocks base method.
func (m *MockLumeraClient) Verify(ctx context.Context, creator string, file, sigBytes []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", ctx, creator, file, sigBytes)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockLumeraClientMockRecorder) Verify(ctx, creator, file, sigBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockLumeraClient)(nil).Verify), ctx, creator, file, sigBytes)
}
