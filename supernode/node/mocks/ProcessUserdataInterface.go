// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	userdata "github.com/LumeraProtocol/supernode/common/service/userdata"
)

// ProcessUserdataInterface is an autogenerated mock type for the ProcessUserdataInterface type
type ProcessUserdataInterface struct {
	mock.Mock
}

// SendUserdataToLeader provides a mock function with given fields: ctx, finalUserdata
func (_m *ProcessUserdataInterface) SendUserdataToLeader(ctx context.Context, finalUserdata userdata.ProcessRequestSigned) (userdata.SuperNodeReply, error) {
	ret := _m.Called(ctx, finalUserdata)

	var r0 userdata.SuperNodeReply
	if rf, ok := ret.Get(0).(func(context.Context, userdata.ProcessRequestSigned) userdata.SuperNodeReply); ok {
		r0 = rf(ctx, finalUserdata)
	} else {
		r0 = ret.Get(0).(userdata.SuperNodeReply)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, userdata.ProcessRequestSigned) error); ok {
		r1 = rf(ctx, finalUserdata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendUserdataToPrimary provides a mock function with given fields: ctx, dataSigned
func (_m *ProcessUserdataInterface) SendUserdataToPrimary(ctx context.Context, dataSigned userdata.SuperNodeRequest) (userdata.SuperNodeReply, error) {
	ret := _m.Called(ctx, dataSigned)

	var r0 userdata.SuperNodeReply
	if rf, ok := ret.Get(0).(func(context.Context, userdata.SuperNodeRequest) userdata.SuperNodeReply); ok {
		r0 = rf(ctx, dataSigned)
	} else {
		r0 = ret.Get(0).(userdata.SuperNodeReply)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, userdata.SuperNodeRequest) error); ok {
		r1 = rf(ctx, dataSigned)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessID provides a mock function with given fields:
func (_m *ProcessUserdataInterface) SessID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Session provides a mock function with given fields: ctx, nodeID, sessID
func (_m *ProcessUserdataInterface) Session(ctx context.Context, nodeID string, sessID string) error {
	ret := _m.Called(ctx, nodeID, sessID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, nodeID, sessID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewProcessUserdataInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewProcessUserdataInterface creates a new instance of ProcessUserdataInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProcessUserdataInterface(t mockConstructorTestingTNewProcessUserdataInterface) *ProcessUserdataInterface {
	mock := &ProcessUserdataInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
