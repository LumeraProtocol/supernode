// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	supernode "github.com/LumeraProtocol/supernode/proto/supernode"

	types "github.com/LumeraProtocol/supernode/common/types"
)

// SelfHealingChallengeInterface is an autogenerated mock type for the SelfHealingChallengeInterface type
type SelfHealingChallengeInterface struct {
	mock.Mock
}

// BroadcastSelfHealingMetrics provides a mock function with given fields: ctx, req
func (_m *SelfHealingChallengeInterface) BroadcastSelfHealingMetrics(ctx context.Context, req types.ProcessBroadcastMetricsRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ProcessBroadcastMetricsRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Ping provides a mock function with given fields: ctx, pingRequest
func (_m *SelfHealingChallengeInterface) Ping(ctx context.Context, pingRequest *supernode.PingRequest) (*supernode.PingResponse, error) {
	ret := _m.Called(ctx, pingRequest)

	var r0 *supernode.PingResponse
	if rf, ok := ret.Get(0).(func(context.Context, *supernode.PingRequest) *supernode.PingResponse); ok {
		r0 = rf(ctx, pingRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*supernode.PingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *supernode.PingRequest) error); ok {
		r1 = rf(ctx, pingRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessSelfHealingChallenge provides a mock function with given fields: ctx, challengeMessage
func (_m *SelfHealingChallengeInterface) ProcessSelfHealingChallenge(ctx context.Context, challengeMessage *supernode.SelfHealingMessage) error {
	ret := _m.Called(ctx, challengeMessage)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *supernode.SelfHealingMessage) error); ok {
		r0 = rf(ctx, challengeMessage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessID provides a mock function with given fields:
func (_m *SelfHealingChallengeInterface) SessID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Session provides a mock function with given fields: ctx, nodeID, sessID
func (_m *SelfHealingChallengeInterface) Session(ctx context.Context, nodeID string, sessID string) error {
	ret := _m.Called(ctx, nodeID, sessID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, nodeID, sessID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifySelfHealingChallenge provides a mock function with given fields: ctx, challengeMessage
func (_m *SelfHealingChallengeInterface) VerifySelfHealingChallenge(ctx context.Context, challengeMessage *supernode.SelfHealingMessage) (types.SelfHealingMessage, error) {
	ret := _m.Called(ctx, challengeMessage)

	var r0 types.SelfHealingMessage
	if rf, ok := ret.Get(0).(func(context.Context, *supernode.SelfHealingMessage) types.SelfHealingMessage); ok {
		r0 = rf(ctx, challengeMessage)
	} else {
		r0 = ret.Get(0).(types.SelfHealingMessage)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *supernode.SelfHealingMessage) error); ok {
		r1 = rf(ctx, challengeMessage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSelfHealingChallengeInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewSelfHealingChallengeInterface creates a new instance of SelfHealingChallengeInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSelfHealingChallengeInterface(t mockConstructorTestingTNewSelfHealingChallengeInterface) *SelfHealingChallengeInterface {
	mock := &SelfHealingChallengeInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
