// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// RegisterSenseInterface is an autogenerated mock type for the RegisterSenseInterface type
type RegisterSenseInterface struct {
	mock.Mock
}

// SendSenseTicketSignature provides a mock function with given fields: ctx, nodeID, signature
func (_m *RegisterSenseInterface) SendSenseTicketSignature(ctx context.Context, nodeID string, signature []byte) error {
	ret := _m.Called(ctx, nodeID, signature)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) error); ok {
		r0 = rf(ctx, nodeID, signature)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendSignedDDAndFingerprints provides a mock function with given fields: ctx, sessionID, fromNodeID, compressedDDAndFingerprints
func (_m *RegisterSenseInterface) SendSignedDDAndFingerprints(ctx context.Context, sessionID string, fromNodeID string, compressedDDAndFingerprints []byte) error {
	ret := _m.Called(ctx, sessionID, fromNodeID, compressedDDAndFingerprints)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte) error); ok {
		r0 = rf(ctx, sessionID, fromNodeID, compressedDDAndFingerprints)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessID provides a mock function with given fields:
func (_m *RegisterSenseInterface) SessID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Session provides a mock function with given fields: ctx, nodeID, sessID
func (_m *RegisterSenseInterface) Session(ctx context.Context, nodeID string, sessID string) error {
	ret := _m.Called(ctx, nodeID, sessID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, nodeID, sessID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRegisterSenseInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewRegisterSenseInterface creates a new instance of RegisterSenseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRegisterSenseInterface(t mockConstructorTestingTNewRegisterSenseInterface) *RegisterSenseInterface {
	mock := &RegisterSenseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
